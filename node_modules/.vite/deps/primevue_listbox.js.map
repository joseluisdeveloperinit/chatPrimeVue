{
  "version": 3,
  "sources": ["../../@primevue/src/blank/BlankIcon.vue", "../../@primevue/src/blank/BlankIcon.vue", "../../@primevue/src/check/CheckIcon.vue", "../../@primevue/src/check/CheckIcon.vue", "../../@primevue/src/search/SearchIcon.vue", "../../@primevue/src/search/SearchIcon.vue", "../../src/virtualscroller/style/VirtualScrollerStyle.js", "../../src/virtualscroller/BaseVirtualScroller.vue", "../../src/virtualscroller/VirtualScroller.vue", "../../src/virtualscroller/VirtualScroller.vue", "../../src/listbox/style/ListboxStyle.js", "../../src/listbox/BaseListbox.vue", "../../src/listbox/Listbox.vue", "../../src/listbox/Listbox.vue"],
  "sourcesContent": ["<template>\n    <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" v-bind=\"pti()\">\n        <rect width=\"1\" height=\"1\" fill=\"currentColor\" fill-opacity=\"0\" />\n    </svg>\n</template>\n<script>\nimport BaseIcon from '@primevue/icons/baseicon';\n\nexport default {\n    name: 'BlankIcon',\n    extends: BaseIcon\n};\n</script>\n", "<template>\n    <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" v-bind=\"pti()\">\n        <rect width=\"1\" height=\"1\" fill=\"currentColor\" fill-opacity=\"0\" />\n    </svg>\n</template>\n<script>\nimport BaseIcon from '@primevue/icons/baseicon';\n\nexport default {\n    name: 'BlankIcon',\n    extends: BaseIcon\n};\n</script>\n", "<template>\n    <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" v-bind=\"pti()\">\n        <path\n            d=\"M4.86199 11.5948C4.78717 11.5923 4.71366 11.5745 4.64596 11.5426C4.57826 11.5107 4.51779 11.4652 4.46827 11.4091L0.753985 7.69483C0.683167 7.64891 0.623706 7.58751 0.580092 7.51525C0.536478 7.44299 0.509851 7.36177 0.502221 7.27771C0.49459 7.19366 0.506156 7.10897 0.536046 7.03004C0.565935 6.95111 0.613367 6.88 0.674759 6.82208C0.736151 6.76416 0.8099 6.72095 0.890436 6.69571C0.970973 6.67046 1.05619 6.66385 1.13966 6.67635C1.22313 6.68886 1.30266 6.72017 1.37226 6.76792C1.44186 6.81567 1.4997 6.8786 1.54141 6.95197L4.86199 10.2503L12.6397 2.49483C12.7444 2.42694 12.8689 2.39617 12.9932 2.40745C13.1174 2.41873 13.2343 2.47141 13.3251 2.55705C13.4159 2.64268 13.4753 2.75632 13.4938 2.87973C13.5123 3.00315 13.4888 3.1292 13.4271 3.23768L5.2557 11.4091C5.20618 11.4652 5.14571 11.5107 5.07801 11.5426C5.01031 11.5745 4.9368 11.5923 4.86199 11.5948Z\"\n            fill=\"currentColor\"\n        />\n    </svg>\n</template>\n<script>\nimport BaseIcon from '@primevue/icons/baseicon';\n\nexport default {\n    name: 'CheckIcon',\n    extends: BaseIcon\n};\n</script>\n", "<template>\n    <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" v-bind=\"pti()\">\n        <path\n            d=\"M4.86199 11.5948C4.78717 11.5923 4.71366 11.5745 4.64596 11.5426C4.57826 11.5107 4.51779 11.4652 4.46827 11.4091L0.753985 7.69483C0.683167 7.64891 0.623706 7.58751 0.580092 7.51525C0.536478 7.44299 0.509851 7.36177 0.502221 7.27771C0.49459 7.19366 0.506156 7.10897 0.536046 7.03004C0.565935 6.95111 0.613367 6.88 0.674759 6.82208C0.736151 6.76416 0.8099 6.72095 0.890436 6.69571C0.970973 6.67046 1.05619 6.66385 1.13966 6.67635C1.22313 6.68886 1.30266 6.72017 1.37226 6.76792C1.44186 6.81567 1.4997 6.8786 1.54141 6.95197L4.86199 10.2503L12.6397 2.49483C12.7444 2.42694 12.8689 2.39617 12.9932 2.40745C13.1174 2.41873 13.2343 2.47141 13.3251 2.55705C13.4159 2.64268 13.4753 2.75632 13.4938 2.87973C13.5123 3.00315 13.4888 3.1292 13.4271 3.23768L5.2557 11.4091C5.20618 11.4652 5.14571 11.5107 5.07801 11.5426C5.01031 11.5745 4.9368 11.5923 4.86199 11.5948Z\"\n            fill=\"currentColor\"\n        />\n    </svg>\n</template>\n<script>\nimport BaseIcon from '@primevue/icons/baseicon';\n\nexport default {\n    name: 'CheckIcon',\n    extends: BaseIcon\n};\n</script>\n", "<template>\n    <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" v-bind=\"pti()\">\n        <path\n            fill-rule=\"evenodd\"\n            clip-rule=\"evenodd\"\n            d=\"M2.67602 11.0265C3.6661 11.688 4.83011 12.0411 6.02086 12.0411C6.81149 12.0411 7.59438 11.8854 8.32483 11.5828C8.87005 11.357 9.37808 11.0526 9.83317 10.6803L12.9769 13.8241C13.0323 13.8801 13.0983 13.9245 13.171 13.9548C13.2438 13.985 13.3219 14.0003 13.4007 14C13.4795 14.0003 13.5575 13.985 13.6303 13.9548C13.7031 13.9245 13.7691 13.8801 13.8244 13.8241C13.9367 13.7116 13.9998 13.5592 13.9998 13.4003C13.9998 13.2414 13.9367 13.089 13.8244 12.9765L10.6807 9.8328C11.053 9.37773 11.3573 8.86972 11.5831 8.32452C11.8857 7.59408 12.0414 6.81119 12.0414 6.02056C12.0414 4.8298 11.6883 3.66579 11.0268 2.67572C10.3652 1.68564 9.42494 0.913972 8.32483 0.45829C7.22472 0.00260857 6.01418 -0.116618 4.84631 0.115686C3.67844 0.34799 2.60568 0.921393 1.76369 1.76338C0.921698 2.60537 0.348296 3.67813 0.115991 4.84601C-0.116313 6.01388 0.00291375 7.22441 0.458595 8.32452C0.914277 9.42464 1.68595 10.3649 2.67602 11.0265ZM3.35565 2.0158C4.14456 1.48867 5.07206 1.20731 6.02086 1.20731C7.29317 1.20731 8.51338 1.71274 9.41304 2.6124C10.3127 3.51206 10.8181 4.73226 10.8181 6.00457C10.8181 6.95337 10.5368 7.88088 10.0096 8.66978C9.48251 9.45868 8.73328 10.0736 7.85669 10.4367C6.98011 10.7997 6.01554 10.8947 5.08496 10.7096C4.15439 10.5245 3.2996 10.0676 2.62869 9.39674C1.95778 8.72583 1.50089 7.87104 1.31579 6.94046C1.13068 6.00989 1.22568 5.04532 1.58878 4.16874C1.95187 3.29215 2.56675 2.54292 3.35565 2.0158Z\"\n            fill=\"currentColor\"\n        />\n    </svg>\n</template>\n\n<script>\nimport BaseIcon from '@primevue/icons/baseicon';\n\nexport default {\n    name: 'SearchIcon',\n    extends: BaseIcon\n};\n</script>\n", "<template>\n    <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" v-bind=\"pti()\">\n        <path\n            fill-rule=\"evenodd\"\n            clip-rule=\"evenodd\"\n            d=\"M2.67602 11.0265C3.6661 11.688 4.83011 12.0411 6.02086 12.0411C6.81149 12.0411 7.59438 11.8854 8.32483 11.5828C8.87005 11.357 9.37808 11.0526 9.83317 10.6803L12.9769 13.8241C13.0323 13.8801 13.0983 13.9245 13.171 13.9548C13.2438 13.985 13.3219 14.0003 13.4007 14C13.4795 14.0003 13.5575 13.985 13.6303 13.9548C13.7031 13.9245 13.7691 13.8801 13.8244 13.8241C13.9367 13.7116 13.9998 13.5592 13.9998 13.4003C13.9998 13.2414 13.9367 13.089 13.8244 12.9765L10.6807 9.8328C11.053 9.37773 11.3573 8.86972 11.5831 8.32452C11.8857 7.59408 12.0414 6.81119 12.0414 6.02056C12.0414 4.8298 11.6883 3.66579 11.0268 2.67572C10.3652 1.68564 9.42494 0.913972 8.32483 0.45829C7.22472 0.00260857 6.01418 -0.116618 4.84631 0.115686C3.67844 0.34799 2.60568 0.921393 1.76369 1.76338C0.921698 2.60537 0.348296 3.67813 0.115991 4.84601C-0.116313 6.01388 0.00291375 7.22441 0.458595 8.32452C0.914277 9.42464 1.68595 10.3649 2.67602 11.0265ZM3.35565 2.0158C4.14456 1.48867 5.07206 1.20731 6.02086 1.20731C7.29317 1.20731 8.51338 1.71274 9.41304 2.6124C10.3127 3.51206 10.8181 4.73226 10.8181 6.00457C10.8181 6.95337 10.5368 7.88088 10.0096 8.66978C9.48251 9.45868 8.73328 10.0736 7.85669 10.4367C6.98011 10.7997 6.01554 10.8947 5.08496 10.7096C4.15439 10.5245 3.2996 10.0676 2.62869 9.39674C1.95778 8.72583 1.50089 7.87104 1.31579 6.94046C1.13068 6.00989 1.22568 5.04532 1.58878 4.16874C1.95187 3.29215 2.56675 2.54292 3.35565 2.0158Z\"\n            fill=\"currentColor\"\n        />\n    </svg>\n</template>\n\n<script>\nimport BaseIcon from '@primevue/icons/baseicon';\n\nexport default {\n    name: 'SearchIcon',\n    extends: BaseIcon\n};\n</script>\n", "import { style } from '@primeuix/styles/virtualscroller';\nimport BaseStyle from '@primevue/core/base/style';\n\nconst css = `\n.p-virtualscroller {\n    position: relative;\n    overflow: auto;\n    contain: strict;\n    transform: translateZ(0);\n    will-change: scroll-position;\n    outline: 0 none;\n}\n\n.p-virtualscroller-content {\n    position: absolute;\n    top: 0;\n    left: 0;\n    min-height: 100%;\n    min-width: 100%;\n    will-change: transform;\n}\n\n.p-virtualscroller-spacer {\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 1px;\n    width: 1px;\n    transform-origin: 0 0;\n    pointer-events: none;\n}\n\n.p-virtualscroller-loader {\n    position: sticky;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n\n.p-virtualscroller-loader-mask {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.p-virtualscroller-horizontal > .p-virtualscroller-content {\n    display: flex;\n}\n\n.p-virtualscroller-inline .p-virtualscroller-content {\n    position: static;\n}\n\n.p-virtualscroller .p-virtualscroller-loading {\n    transform: none !important;\n    min-height: 0;\n    position: sticky;\n    inset-block-start: 0;\n    inset-inline-start: 0;\n}\n`;\n\nexport default BaseStyle.extend({\n    name: 'virtualscroller',\n    css,\n    style\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport VirtualScrollerStyle from 'primevue/virtualscroller/style';\n\nexport default {\n    name: 'BaseVirtualScroller',\n    extends: BaseComponent,\n    props: {\n        id: {\n            type: String,\n            default: null\n        },\n        style: null,\n        class: null,\n        items: {\n            type: Array,\n            default: null\n        },\n        itemSize: {\n            type: [Number, Array],\n            default: 0\n        },\n        scrollHeight: null,\n        scrollWidth: null,\n        orientation: {\n            type: String,\n            default: 'vertical'\n        },\n        numToleratedItems: {\n            type: Number,\n            default: null\n        },\n        delay: {\n            type: Number,\n            default: 0\n        },\n        resizeDelay: {\n            type: Number,\n            default: 10\n        },\n        lazy: {\n            type: Boolean,\n            default: false\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        loaderDisabled: {\n            type: Boolean,\n            default: false\n        },\n        columns: {\n            type: Array,\n            default: null\n        },\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        showSpacer: {\n            type: Boolean,\n            default: true\n        },\n        showLoader: {\n            type: Boolean,\n            default: false\n        },\n        tabindex: {\n            type: Number,\n            default: 0\n        },\n        inline: {\n            type: Boolean,\n            default: false\n        },\n        step: {\n            type: Number,\n            default: 0\n        },\n        appendOnly: {\n            type: Boolean,\n            default: false\n        },\n        autoSize: {\n            type: Boolean,\n            default: false\n        }\n    },\n    style: VirtualScrollerStyle,\n    provide() {\n        return {\n            $pcVirtualScroller: this,\n            $parentInstance: this\n        };\n    },\n    beforeMount() {\n        VirtualScrollerStyle.loadCSS({ nonce: this.$primevueConfig?.csp?.nonce });\n    }\n};\n</script>\n", "<template>\n    <template v-if=\"!disabled\">\n        <div :ref=\"elementRef\" :class=\"containerClass\" :tabindex=\"tabindex\" :style=\"style\" @scroll=\"onScroll\" v-bind=\"ptmi('root')\">\n            <slot\n                name=\"content\"\n                :styleClass=\"contentClass\"\n                :items=\"loadedItems\"\n                :getItemOptions=\"getOptions\"\n                :loading=\"d_loading\"\n                :getLoaderOptions=\"getLoaderOptions\"\n                :itemSize=\"itemSize\"\n                :rows=\"loadedRows\"\n                :columns=\"loadedColumns\"\n                :contentRef=\"contentRef\"\n                :spacerStyle=\"spacerStyle\"\n                :contentStyle=\"contentStyle\"\n                :vertical=\"isVertical()\"\n                :horizontal=\"isHorizontal()\"\n                :both=\"isBoth()\"\n            >\n                <div :ref=\"contentRef\" :class=\"contentClass\" :style=\"contentStyle\" v-bind=\"ptm('content')\">\n                    <template v-for=\"(item, index) of loadedItems\" :key=\"index\">\n                        <slot name=\"item\" :item=\"item\" :options=\"getOptions(index)\"></slot>\n                    </template>\n                </div>\n            </slot>\n            <div v-if=\"showSpacer\" class=\"p-virtualscroller-spacer\" :style=\"spacerStyle\" v-bind=\"ptm('spacer')\"></div>\n            <div v-if=\"!loaderDisabled && showLoader && d_loading\" :class=\"loaderClass\" v-bind=\"ptm('loader')\">\n                <template v-if=\"$slots && $slots.loader\">\n                    <template v-for=\"(_, index) of loaderArr\" :key=\"index\">\n                        <slot name=\"loader\" :options=\"getLoaderOptions(index, isBoth() && { numCols: d_numItemsInViewport.cols })\"></slot>\n                    </template>\n                </template>\n                <slot name=\"loadingicon\">\n                    <SpinnerIcon spin class=\"p-virtualscroller-loading-icon\" v-bind=\"ptm('loadingIcon')\" />\n                </slot>\n            </div>\n        </div>\n    </template>\n    <template v-else>\n        <slot></slot>\n        <slot name=\"content\" :items=\"items\" :rows=\"items\" :columns=\"loadedColumns\"></slot>\n    </template>\n</template>\n\n<script>\nimport { findSingle, getHeight, getWidth, isVisible } from '@primeuix/utils/dom';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport BaseVirtualScroller from './BaseVirtualScroller.vue';\n\nexport default {\n    name: 'VirtualScroller',\n    extends: BaseVirtualScroller,\n    inheritAttrs: false,\n    emits: ['update:numToleratedItems', 'scroll', 'scroll-index-change', 'lazy-load'],\n    data() {\n        const both = this.isBoth();\n\n        return {\n            first: both ? { rows: 0, cols: 0 } : 0,\n            last: both ? { rows: 0, cols: 0 } : 0,\n            page: both ? { rows: 0, cols: 0 } : 0,\n            numItemsInViewport: both ? { rows: 0, cols: 0 } : 0,\n            lastScrollPos: both ? { top: 0, left: 0 } : 0,\n            d_numToleratedItems: this.numToleratedItems,\n            d_loading: this.loading,\n            loaderArr: [],\n            spacerStyle: {},\n            contentStyle: {}\n        };\n    },\n    element: null,\n    content: null,\n    lastScrollPos: null,\n    scrollTimeout: null,\n    resizeTimeout: null,\n    defaultWidth: 0,\n    defaultHeight: 0,\n    defaultContentWidth: 0,\n    defaultContentHeight: 0,\n    isRangeChanged: false,\n    lazyLoadState: {},\n    resizeListener: null,\n    resizeObserver: null,\n    initialized: false,\n    watch: {\n        numToleratedItems(newValue) {\n            this.d_numToleratedItems = newValue;\n        },\n        loading(newValue, oldValue) {\n            if (this.lazy && newValue !== oldValue && newValue !== this.d_loading) {\n                this.d_loading = newValue;\n            }\n        },\n        items: {\n            handler(newValue, oldValue) {\n                if (!oldValue || oldValue.length !== (newValue || []).length) {\n                    this.init();\n                    this.calculateAutoSize();\n                }\n            },\n            deep: true\n        },\n        itemSize() {\n            this.init();\n            this.calculateAutoSize();\n        },\n        orientation() {\n            this.lastScrollPos = this.isBoth() ? { top: 0, left: 0 } : 0;\n        },\n        scrollHeight() {\n            this.init();\n            this.calculateAutoSize();\n        },\n        scrollWidth() {\n            this.init();\n            this.calculateAutoSize();\n        }\n    },\n    mounted() {\n        this.viewInit();\n\n        this.lastScrollPos = this.isBoth() ? { top: 0, left: 0 } : 0;\n        this.lazyLoadState = this.lazyLoadState || {};\n    },\n    updated() {\n        !this.initialized && this.viewInit();\n    },\n    unmounted() {\n        this.unbindResizeListener();\n\n        this.initialized = false;\n    },\n    methods: {\n        viewInit() {\n            if (isVisible(this.element)) {\n                this.setContentEl(this.content);\n                this.init();\n                this.calculateAutoSize();\n\n                this.defaultWidth = getWidth(this.element);\n                this.defaultHeight = getHeight(this.element);\n                this.defaultContentWidth = getWidth(this.content);\n                this.defaultContentHeight = getHeight(this.content);\n                this.initialized = true;\n            }\n\n            if (this.element) {\n                this.bindResizeListener();\n            }\n        },\n        init() {\n            if (!this.disabled) {\n                this.setSize();\n                this.calculateOptions();\n                this.setSpacerSize();\n            }\n        },\n        isVertical() {\n            return this.orientation === 'vertical';\n        },\n        isHorizontal() {\n            return this.orientation === 'horizontal';\n        },\n        isBoth() {\n            return this.orientation === 'both';\n        },\n        scrollTo(options) {\n            //this.lastScrollPos = this.both ? { top: 0, left: 0 } : 0;\n            this.element && this.element.scrollTo(options);\n        },\n        scrollToIndex(index, behavior = 'auto') {\n            const both = this.isBoth();\n            const horizontal = this.isHorizontal();\n            const valid = both ? index.every((i) => i > -1) : index > -1;\n\n            if (valid) {\n                const first = this.first;\n                const { scrollTop = 0, scrollLeft = 0 } = this.element;\n                const { numToleratedItems } = this.calculateNumItems();\n                const contentPos = this.getContentPosition();\n                const itemSize = this.itemSize;\n                const calculateFirst = (_index = 0, _numT) => (_index <= _numT ? 0 : _index);\n                const calculateCoord = (_first, _size, _cpos) => _first * _size + _cpos;\n                const scrollTo = (left = 0, top = 0) => this.scrollTo({ left, top, behavior });\n                let newFirst = both ? { rows: 0, cols: 0 } : 0;\n                let isRangeChanged = false,\n                    isScrollChanged = false;\n\n                if (both) {\n                    newFirst = { rows: calculateFirst(index[0], numToleratedItems[0]), cols: calculateFirst(index[1], numToleratedItems[1]) };\n                    scrollTo(calculateCoord(newFirst.cols, itemSize[1], contentPos.left), calculateCoord(newFirst.rows, itemSize[0], contentPos.top));\n                    isScrollChanged = this.lastScrollPos.top !== scrollTop || this.lastScrollPos.left !== scrollLeft;\n                    isRangeChanged = newFirst.rows !== first.rows || newFirst.cols !== first.cols;\n                } else {\n                    newFirst = calculateFirst(index, numToleratedItems);\n                    horizontal ? scrollTo(calculateCoord(newFirst, itemSize, contentPos.left), scrollTop) : scrollTo(scrollLeft, calculateCoord(newFirst, itemSize, contentPos.top));\n                    isScrollChanged = this.lastScrollPos !== (horizontal ? scrollLeft : scrollTop);\n                    isRangeChanged = newFirst !== first;\n                }\n\n                this.isRangeChanged = isRangeChanged;\n                isScrollChanged && (this.first = newFirst);\n            }\n        },\n        scrollInView(index, to, behavior = 'auto') {\n            if (to) {\n                const both = this.isBoth();\n                const horizontal = this.isHorizontal();\n                const valid = both ? index.every((i) => i > -1) : index > -1;\n\n                if (valid) {\n                    const { first, viewport } = this.getRenderedRange();\n                    const scrollTo = (left = 0, top = 0) => this.scrollTo({ left, top, behavior });\n                    const isToStart = to === 'to-start';\n                    const isToEnd = to === 'to-end';\n\n                    if (isToStart) {\n                        if (both) {\n                            if (viewport.first.rows - first.rows > index[0]) {\n                                scrollTo(viewport.first.cols * this.itemSize[1], (viewport.first.rows - 1) * this.itemSize[0]);\n                            } else if (viewport.first.cols - first.cols > index[1]) {\n                                scrollTo((viewport.first.cols - 1) * this.itemSize[1], viewport.first.rows * this.itemSize[0]);\n                            }\n                        } else {\n                            if (viewport.first - first > index) {\n                                const pos = (viewport.first - 1) * this.itemSize;\n\n                                horizontal ? scrollTo(pos, 0) : scrollTo(0, pos);\n                            }\n                        }\n                    } else if (isToEnd) {\n                        if (both) {\n                            if (viewport.last.rows - first.rows <= index[0] + 1) {\n                                scrollTo(viewport.first.cols * this.itemSize[1], (viewport.first.rows + 1) * this.itemSize[0]);\n                            } else if (viewport.last.cols - first.cols <= index[1] + 1) {\n                                scrollTo((viewport.first.cols + 1) * this.itemSize[1], viewport.first.rows * this.itemSize[0]);\n                            }\n                        } else {\n                            if (viewport.last - first <= index + 1) {\n                                const pos = (viewport.first + 1) * this.itemSize;\n\n                                horizontal ? scrollTo(pos, 0) : scrollTo(0, pos);\n                            }\n                        }\n                    }\n                }\n            } else {\n                this.scrollToIndex(index, behavior);\n            }\n        },\n        getRenderedRange() {\n            const calculateFirstInViewport = (_pos, _size) => Math.floor(_pos / (_size || _pos));\n\n            let firstInViewport = this.first;\n            let lastInViewport = 0;\n\n            if (this.element) {\n                const both = this.isBoth();\n                const horizontal = this.isHorizontal();\n                const { scrollTop, scrollLeft } = this.element;\n\n                if (both) {\n                    firstInViewport = { rows: calculateFirstInViewport(scrollTop, this.itemSize[0]), cols: calculateFirstInViewport(scrollLeft, this.itemSize[1]) };\n                    lastInViewport = { rows: firstInViewport.rows + this.numItemsInViewport.rows, cols: firstInViewport.cols + this.numItemsInViewport.cols };\n                } else {\n                    const scrollPos = horizontal ? scrollLeft : scrollTop;\n\n                    firstInViewport = calculateFirstInViewport(scrollPos, this.itemSize);\n                    lastInViewport = firstInViewport + this.numItemsInViewport;\n                }\n            }\n\n            return {\n                first: this.first,\n                last: this.last,\n                viewport: {\n                    first: firstInViewport,\n                    last: lastInViewport\n                }\n            };\n        },\n        calculateNumItems() {\n            const both = this.isBoth();\n            const horizontal = this.isHorizontal();\n            const itemSize = this.itemSize;\n            const contentPos = this.getContentPosition();\n            const contentWidth = this.element ? this.element.offsetWidth - contentPos.left : 0;\n            const contentHeight = this.element ? this.element.offsetHeight - contentPos.top : 0;\n            const calculateNumItemsInViewport = (_contentSize, _itemSize) => Math.ceil(_contentSize / (_itemSize || _contentSize));\n            const calculateNumToleratedItems = (_numItems) => Math.ceil(_numItems / 2);\n            const numItemsInViewport = both\n                ? { rows: calculateNumItemsInViewport(contentHeight, itemSize[0]), cols: calculateNumItemsInViewport(contentWidth, itemSize[1]) }\n                : calculateNumItemsInViewport(horizontal ? contentWidth : contentHeight, itemSize);\n\n            const numToleratedItems = this.d_numToleratedItems || (both ? [calculateNumToleratedItems(numItemsInViewport.rows), calculateNumToleratedItems(numItemsInViewport.cols)] : calculateNumToleratedItems(numItemsInViewport));\n\n            return { numItemsInViewport, numToleratedItems };\n        },\n        calculateOptions() {\n            const both = this.isBoth();\n            const first = this.first;\n            const { numItemsInViewport, numToleratedItems } = this.calculateNumItems();\n            const calculateLast = (_first, _num, _numT, _isCols = false) => this.getLast(_first + _num + (_first < _numT ? 2 : 3) * _numT, _isCols);\n            const last = both\n                ? { rows: calculateLast(first.rows, numItemsInViewport.rows, numToleratedItems[0]), cols: calculateLast(first.cols, numItemsInViewport.cols, numToleratedItems[1], true) }\n                : calculateLast(first, numItemsInViewport, numToleratedItems);\n\n            this.last = last;\n            this.numItemsInViewport = numItemsInViewport;\n            this.d_numToleratedItems = numToleratedItems;\n            this.$emit('update:numToleratedItems', this.d_numToleratedItems);\n\n            if (this.showLoader) {\n                this.loaderArr = both ? Array.from({ length: numItemsInViewport.rows }).map(() => Array.from({ length: numItemsInViewport.cols })) : Array.from({ length: numItemsInViewport });\n            }\n\n            if (this.lazy) {\n                Promise.resolve().then(() => {\n                    this.lazyLoadState = {\n                        first: this.step ? (both ? { rows: 0, cols: first.cols } : 0) : first,\n                        last: Math.min(this.step ? this.step : last, this.items?.length || 0)\n                    };\n\n                    this.$emit('lazy-load', this.lazyLoadState);\n                });\n            }\n        },\n        calculateAutoSize() {\n            if (this.autoSize && !this.d_loading) {\n                Promise.resolve().then(() => {\n                    if (this.content) {\n                        const both = this.isBoth();\n                        const horizontal = this.isHorizontal();\n                        const vertical = this.isVertical();\n\n                        this.content.style.minHeight = this.content.style.minWidth = 'auto';\n                        this.content.style.position = 'relative';\n                        this.element.style.contain = 'none';\n\n                        /*const [contentWidth, contentHeight] = [getWidth(this.content), getHeight(this.content)];\n\n                        contentWidth !== this.defaultContentWidth && (this.element.style.width = '');\n                        contentHeight !== this.defaultContentHeight && (this.element.style.height = '');*/\n\n                        const [width, height] = [getWidth(this.element), getHeight(this.element)];\n\n                        (both || horizontal) && (this.element.style.width = width < this.defaultWidth ? width + 'px' : this.scrollWidth || this.defaultWidth + 'px');\n                        (both || vertical) && (this.element.style.height = height < this.defaultHeight ? height + 'px' : this.scrollHeight || this.defaultHeight + 'px');\n\n                        this.content.style.minHeight = this.content.style.minWidth = '';\n                        this.content.style.position = '';\n                        this.element.style.contain = '';\n                    }\n                });\n            }\n        },\n        getLast(last = 0, isCols) {\n            return this.items ? Math.min(isCols ? (this.columns || this.items[0])?.length || 0 : this.items?.length || 0, last) : 0;\n        },\n        getContentPosition() {\n            if (this.content) {\n                const style = getComputedStyle(this.content);\n                const left = parseFloat(style.paddingLeft) + Math.max(parseFloat(style.left) || 0, 0);\n                const right = parseFloat(style.paddingRight) + Math.max(parseFloat(style.right) || 0, 0);\n                const top = parseFloat(style.paddingTop) + Math.max(parseFloat(style.top) || 0, 0);\n                const bottom = parseFloat(style.paddingBottom) + Math.max(parseFloat(style.bottom) || 0, 0);\n\n                return { left, right, top, bottom, x: left + right, y: top + bottom };\n            }\n\n            return { left: 0, right: 0, top: 0, bottom: 0, x: 0, y: 0 };\n        },\n        setSize() {\n            if (this.element) {\n                const both = this.isBoth();\n                const horizontal = this.isHorizontal();\n                const parentElement = this.element.parentElement;\n                const width = this.scrollWidth || `${this.element.offsetWidth || parentElement.offsetWidth}px`;\n                const height = this.scrollHeight || `${this.element.offsetHeight || parentElement.offsetHeight}px`;\n                const setProp = (_name, _value) => (this.element.style[_name] = _value);\n\n                if (both || horizontal) {\n                    setProp('height', height);\n                    setProp('width', width);\n                } else {\n                    setProp('height', height);\n                }\n            }\n        },\n        setSpacerSize() {\n            const items = this.items;\n\n            if (items) {\n                const both = this.isBoth();\n                const horizontal = this.isHorizontal();\n                const contentPos = this.getContentPosition();\n                const setProp = (_name, _value, _size, _cpos = 0) => (this.spacerStyle = { ...this.spacerStyle, ...{ [`${_name}`]: (_value || []).length * _size + _cpos + 'px' } });\n\n                if (both) {\n                    setProp('height', items, this.itemSize[0], contentPos.y);\n                    setProp('width', this.columns || items[1], this.itemSize[1], contentPos.x);\n                } else {\n                    horizontal ? setProp('width', this.columns || items, this.itemSize, contentPos.x) : setProp('height', items, this.itemSize, contentPos.y);\n                }\n            }\n        },\n        setContentPosition(pos) {\n            if (this.content && !this.appendOnly) {\n                const both = this.isBoth();\n                const horizontal = this.isHorizontal();\n                const first = pos ? pos.first : this.first;\n                const calculateTranslateVal = (_first, _size) => _first * _size;\n                const setTransform = (_x = 0, _y = 0) => (this.contentStyle = { ...this.contentStyle, ...{ transform: `translate3d(${_x}px, ${_y}px, 0)` } });\n\n                if (both) {\n                    setTransform(calculateTranslateVal(first.cols, this.itemSize[1]), calculateTranslateVal(first.rows, this.itemSize[0]));\n                } else {\n                    const translateVal = calculateTranslateVal(first, this.itemSize);\n\n                    horizontal ? setTransform(translateVal, 0) : setTransform(0, translateVal);\n                }\n            }\n        },\n        onScrollPositionChange(event) {\n            const target = event.target;\n            const both = this.isBoth();\n            const horizontal = this.isHorizontal();\n            const contentPos = this.getContentPosition();\n            const calculateScrollPos = (_pos, _cpos) => (_pos ? (_pos > _cpos ? _pos - _cpos : _pos) : 0);\n            const calculateCurrentIndex = (_pos, _size) => Math.floor(_pos / (_size || _pos));\n\n            const calculateTriggerIndex = (_currentIndex, _first, _last, _num, _numT, _isScrollDownOrRight) => {\n                return _currentIndex <= _numT ? _numT : _isScrollDownOrRight ? _last - _num - _numT : _first + _numT - 1;\n            };\n\n            const calculateFirst = (_currentIndex, _triggerIndex, _first, _last, _num, _numT, _isScrollDownOrRight, _isCols) => {\n                if (_currentIndex <= _numT) return 0;\n                const firstValue = Math.max(0, _isScrollDownOrRight ? (_currentIndex < _triggerIndex ? _first : _currentIndex - _numT) : _currentIndex > _triggerIndex ? _first : _currentIndex - 2 * _numT);\n                const maxFirst = this.getLast(firstValue, _isCols);\n                if (firstValue > maxFirst) return maxFirst - _num;\n                else return firstValue;\n            };\n\n            const calculateLast = (_currentIndex, _first, _last, _num, _numT, _isCols) => {\n                let lastValue = _first + _num + 2 * _numT;\n\n                if (_currentIndex >= _numT) {\n                    lastValue += _numT + 1;\n                }\n\n                return this.getLast(lastValue, _isCols);\n            };\n\n            const scrollTop = calculateScrollPos(target.scrollTop, contentPos.top);\n            const scrollLeft = calculateScrollPos(target.scrollLeft, contentPos.left);\n\n            let newFirst = both ? { rows: 0, cols: 0 } : 0;\n            let newLast = this.last;\n            let isRangeChanged = false;\n            let newScrollPos = this.lastScrollPos;\n\n            if (both) {\n                const isScrollDown = this.lastScrollPos.top <= scrollTop;\n                const isScrollRight = this.lastScrollPos.left <= scrollLeft;\n\n                if (!this.appendOnly || (this.appendOnly && (isScrollDown || isScrollRight))) {\n                    const currentIndex = { rows: calculateCurrentIndex(scrollTop, this.itemSize[0]), cols: calculateCurrentIndex(scrollLeft, this.itemSize[1]) };\n                    const triggerIndex = {\n                        rows: calculateTriggerIndex(currentIndex.rows, this.first.rows, this.last.rows, this.numItemsInViewport.rows, this.d_numToleratedItems[0], isScrollDown),\n                        cols: calculateTriggerIndex(currentIndex.cols, this.first.cols, this.last.cols, this.numItemsInViewport.cols, this.d_numToleratedItems[1], isScrollRight)\n                    };\n\n                    newFirst = {\n                        rows: calculateFirst(currentIndex.rows, triggerIndex.rows, this.first.rows, this.last.rows, this.numItemsInViewport.rows, this.d_numToleratedItems[0], isScrollDown),\n                        cols: calculateFirst(currentIndex.cols, triggerIndex.cols, this.first.cols, this.last.cols, this.numItemsInViewport.cols, this.d_numToleratedItems[1], isScrollRight, true)\n                    };\n                    newLast = {\n                        rows: calculateLast(currentIndex.rows, newFirst.rows, this.last.rows, this.numItemsInViewport.rows, this.d_numToleratedItems[0]),\n                        cols: calculateLast(currentIndex.cols, newFirst.cols, this.last.cols, this.numItemsInViewport.cols, this.d_numToleratedItems[1], true)\n                    };\n\n                    isRangeChanged = newFirst.rows !== this.first.rows || newLast.rows !== this.last.rows || newFirst.cols !== this.first.cols || newLast.cols !== this.last.cols || this.isRangeChanged;\n                    newScrollPos = { top: scrollTop, left: scrollLeft };\n                }\n            } else {\n                const scrollPos = horizontal ? scrollLeft : scrollTop;\n                const isScrollDownOrRight = this.lastScrollPos <= scrollPos;\n\n                if (!this.appendOnly || (this.appendOnly && isScrollDownOrRight)) {\n                    const currentIndex = calculateCurrentIndex(scrollPos, this.itemSize);\n                    const triggerIndex = calculateTriggerIndex(currentIndex, this.first, this.last, this.numItemsInViewport, this.d_numToleratedItems, isScrollDownOrRight);\n\n                    newFirst = calculateFirst(currentIndex, triggerIndex, this.first, this.last, this.numItemsInViewport, this.d_numToleratedItems, isScrollDownOrRight);\n                    newLast = calculateLast(currentIndex, newFirst, this.last, this.numItemsInViewport, this.d_numToleratedItems);\n                    isRangeChanged = newFirst !== this.first || newLast !== this.last || this.isRangeChanged;\n                    newScrollPos = scrollPos;\n                }\n            }\n\n            return {\n                first: newFirst,\n                last: newLast,\n                isRangeChanged,\n                scrollPos: newScrollPos\n            };\n        },\n        onScrollChange(event) {\n            const { first, last, isRangeChanged, scrollPos } = this.onScrollPositionChange(event);\n\n            if (isRangeChanged) {\n                const newState = { first, last };\n\n                this.setContentPosition(newState);\n\n                this.first = first;\n                this.last = last;\n                this.lastScrollPos = scrollPos;\n\n                this.$emit('scroll-index-change', newState);\n\n                if (this.lazy && this.isPageChanged(first)) {\n                    const lazyLoadState = {\n                        first: this.step ? Math.min(this.getPageByFirst(first) * this.step, (this.items?.length || 0) - this.step) : first,\n                        last: Math.min(this.step ? (this.getPageByFirst(first) + 1) * this.step : last, this.items?.length || 0)\n                    };\n                    const isLazyStateChanged = this.lazyLoadState.first !== lazyLoadState.first || this.lazyLoadState.last !== lazyLoadState.last;\n\n                    isLazyStateChanged && this.$emit('lazy-load', lazyLoadState);\n                    this.lazyLoadState = lazyLoadState;\n                }\n            }\n        },\n        onScroll(event) {\n            this.$emit('scroll', event);\n\n            if (this.delay) {\n                if (this.scrollTimeout) {\n                    clearTimeout(this.scrollTimeout);\n                }\n\n                if (this.isPageChanged()) {\n                    if (!this.d_loading && this.showLoader) {\n                        const { isRangeChanged } = this.onScrollPositionChange(event);\n                        const changed = isRangeChanged || (this.step ? this.isPageChanged() : false);\n\n                        changed && (this.d_loading = true);\n                    }\n\n                    this.scrollTimeout = setTimeout(() => {\n                        this.onScrollChange(event);\n\n                        if (this.d_loading && this.showLoader && (!this.lazy || this.loading === undefined)) {\n                            this.d_loading = false;\n                            this.page = this.getPageByFirst();\n                        }\n                    }, this.delay);\n                }\n            } else {\n                this.onScrollChange(event);\n            }\n        },\n        onResize() {\n            if (this.resizeTimeout) {\n                clearTimeout(this.resizeTimeout);\n            }\n\n            this.resizeTimeout = setTimeout(() => {\n                if (isVisible(this.element)) {\n                    const both = this.isBoth();\n                    const vertical = this.isVertical();\n                    const horizontal = this.isHorizontal();\n                    const [width, height] = [getWidth(this.element), getHeight(this.element)];\n                    const [isDiffWidth, isDiffHeight] = [width !== this.defaultWidth, height !== this.defaultHeight];\n                    const reinit = both ? isDiffWidth || isDiffHeight : horizontal ? isDiffWidth : vertical ? isDiffHeight : false;\n\n                    if (reinit) {\n                        this.d_numToleratedItems = this.numToleratedItems;\n                        this.defaultWidth = width;\n                        this.defaultHeight = height;\n                        this.defaultContentWidth = getWidth(this.content);\n                        this.defaultContentHeight = getHeight(this.content);\n\n                        this.init();\n                    }\n                }\n            }, this.resizeDelay);\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = this.onResize.bind(this);\n\n                window.addEventListener('resize', this.resizeListener);\n                window.addEventListener('orientationchange', this.resizeListener);\n\n                this.resizeObserver = new ResizeObserver(() => {\n                    this.onResize();\n                });\n                this.resizeObserver.observe(this.element);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                window.removeEventListener('orientationchange', this.resizeListener);\n                this.resizeListener = null;\n            }\n\n            if (this.resizeObserver) {\n                this.resizeObserver.disconnect();\n                this.resizeObserver = null;\n            }\n        },\n        getOptions(renderedIndex) {\n            const count = (this.items || []).length;\n            const index = this.isBoth() ? this.first.rows + renderedIndex : this.first + renderedIndex;\n\n            return {\n                index,\n                count,\n                first: index === 0,\n                last: index === count - 1,\n                even: index % 2 === 0,\n                odd: index % 2 !== 0\n            };\n        },\n        getLoaderOptions(index, extOptions) {\n            let count = this.loaderArr.length;\n\n            return {\n                index,\n                count,\n                first: index === 0,\n                last: index === count - 1,\n                even: index % 2 === 0,\n                odd: index % 2 !== 0,\n                ...extOptions\n            };\n        },\n        getPageByFirst(first) {\n            return Math.floor(((first ?? this.first) + this.d_numToleratedItems * 4) / (this.step || 1));\n        },\n        isPageChanged(first) {\n            return this.step && !this.lazy ? this.page !== this.getPageByFirst(first ?? this.first) : true;\n        },\n        setContentEl(el) {\n            this.content = el || this.content || findSingle(this.element, '[data-pc-section=\"content\"]');\n        },\n        elementRef(el) {\n            this.element = el;\n        },\n        contentRef(el) {\n            this.content = el;\n        }\n    },\n    computed: {\n        containerClass() {\n            return [\n                'p-virtualscroller',\n                this.class,\n                {\n                    'p-virtualscroller-inline': this.inline,\n                    'p-virtualscroller-both p-both-scroll': this.isBoth(),\n                    'p-virtualscroller-horizontal p-horizontal-scroll': this.isHorizontal()\n                }\n            ];\n        },\n        contentClass() {\n            return [\n                'p-virtualscroller-content',\n                {\n                    'p-virtualscroller-loading': this.d_loading\n                }\n            ];\n        },\n        loaderClass() {\n            return [\n                'p-virtualscroller-loader',\n                {\n                    'p-virtualscroller-loader-mask': !this.$slots.loader\n                }\n            ];\n        },\n        loadedItems() {\n            if (this.items && !this.d_loading) {\n                if (this.isBoth()) return this.items.slice(this.appendOnly ? 0 : this.first.rows, this.last.rows).map((item) => (this.columns ? item : item.slice(this.appendOnly ? 0 : this.first.cols, this.last.cols)));\n                else if (this.isHorizontal() && this.columns) return this.items;\n                else return this.items.slice(this.appendOnly ? 0 : this.first, this.last);\n            }\n\n            return [];\n        },\n        loadedRows() {\n            return this.d_loading ? (this.loaderDisabled ? this.loaderArr : []) : this.loadedItems;\n        },\n        loadedColumns() {\n            if (this.columns) {\n                const both = this.isBoth();\n                const horizontal = this.isHorizontal();\n\n                if (both || horizontal) {\n                    return this.d_loading && this.loaderDisabled ? (both ? this.loaderArr[0] : this.loaderArr) : this.columns.slice(both ? this.first.cols : this.first, both ? this.last.cols : this.last);\n                }\n            }\n\n            return this.columns;\n        }\n    },\n    components: {\n        SpinnerIcon: SpinnerIcon\n    }\n};\n</script>\n", "<template>\n    <template v-if=\"!disabled\">\n        <div :ref=\"elementRef\" :class=\"containerClass\" :tabindex=\"tabindex\" :style=\"style\" @scroll=\"onScroll\" v-bind=\"ptmi('root')\">\n            <slot\n                name=\"content\"\n                :styleClass=\"contentClass\"\n                :items=\"loadedItems\"\n                :getItemOptions=\"getOptions\"\n                :loading=\"d_loading\"\n                :getLoaderOptions=\"getLoaderOptions\"\n                :itemSize=\"itemSize\"\n                :rows=\"loadedRows\"\n                :columns=\"loadedColumns\"\n                :contentRef=\"contentRef\"\n                :spacerStyle=\"spacerStyle\"\n                :contentStyle=\"contentStyle\"\n                :vertical=\"isVertical()\"\n                :horizontal=\"isHorizontal()\"\n                :both=\"isBoth()\"\n            >\n                <div :ref=\"contentRef\" :class=\"contentClass\" :style=\"contentStyle\" v-bind=\"ptm('content')\">\n                    <template v-for=\"(item, index) of loadedItems\" :key=\"index\">\n                        <slot name=\"item\" :item=\"item\" :options=\"getOptions(index)\"></slot>\n                    </template>\n                </div>\n            </slot>\n            <div v-if=\"showSpacer\" class=\"p-virtualscroller-spacer\" :style=\"spacerStyle\" v-bind=\"ptm('spacer')\"></div>\n            <div v-if=\"!loaderDisabled && showLoader && d_loading\" :class=\"loaderClass\" v-bind=\"ptm('loader')\">\n                <template v-if=\"$slots && $slots.loader\">\n                    <template v-for=\"(_, index) of loaderArr\" :key=\"index\">\n                        <slot name=\"loader\" :options=\"getLoaderOptions(index, isBoth() && { numCols: d_numItemsInViewport.cols })\"></slot>\n                    </template>\n                </template>\n                <slot name=\"loadingicon\">\n                    <SpinnerIcon spin class=\"p-virtualscroller-loading-icon\" v-bind=\"ptm('loadingIcon')\" />\n                </slot>\n            </div>\n        </div>\n    </template>\n    <template v-else>\n        <slot></slot>\n        <slot name=\"content\" :items=\"items\" :rows=\"items\" :columns=\"loadedColumns\"></slot>\n    </template>\n</template>\n\n<script>\nimport { findSingle, getHeight, getWidth, isVisible } from '@primeuix/utils/dom';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport BaseVirtualScroller from './BaseVirtualScroller.vue';\n\nexport default {\n    name: 'VirtualScroller',\n    extends: BaseVirtualScroller,\n    inheritAttrs: false,\n    emits: ['update:numToleratedItems', 'scroll', 'scroll-index-change', 'lazy-load'],\n    data() {\n        const both = this.isBoth();\n\n        return {\n            first: both ? { rows: 0, cols: 0 } : 0,\n            last: both ? { rows: 0, cols: 0 } : 0,\n            page: both ? { rows: 0, cols: 0 } : 0,\n            numItemsInViewport: both ? { rows: 0, cols: 0 } : 0,\n            lastScrollPos: both ? { top: 0, left: 0 } : 0,\n            d_numToleratedItems: this.numToleratedItems,\n            d_loading: this.loading,\n            loaderArr: [],\n            spacerStyle: {},\n            contentStyle: {}\n        };\n    },\n    element: null,\n    content: null,\n    lastScrollPos: null,\n    scrollTimeout: null,\n    resizeTimeout: null,\n    defaultWidth: 0,\n    defaultHeight: 0,\n    defaultContentWidth: 0,\n    defaultContentHeight: 0,\n    isRangeChanged: false,\n    lazyLoadState: {},\n    resizeListener: null,\n    resizeObserver: null,\n    initialized: false,\n    watch: {\n        numToleratedItems(newValue) {\n            this.d_numToleratedItems = newValue;\n        },\n        loading(newValue, oldValue) {\n            if (this.lazy && newValue !== oldValue && newValue !== this.d_loading) {\n                this.d_loading = newValue;\n            }\n        },\n        items: {\n            handler(newValue, oldValue) {\n                if (!oldValue || oldValue.length !== (newValue || []).length) {\n                    this.init();\n                    this.calculateAutoSize();\n                }\n            },\n            deep: true\n        },\n        itemSize() {\n            this.init();\n            this.calculateAutoSize();\n        },\n        orientation() {\n            this.lastScrollPos = this.isBoth() ? { top: 0, left: 0 } : 0;\n        },\n        scrollHeight() {\n            this.init();\n            this.calculateAutoSize();\n        },\n        scrollWidth() {\n            this.init();\n            this.calculateAutoSize();\n        }\n    },\n    mounted() {\n        this.viewInit();\n\n        this.lastScrollPos = this.isBoth() ? { top: 0, left: 0 } : 0;\n        this.lazyLoadState = this.lazyLoadState || {};\n    },\n    updated() {\n        !this.initialized && this.viewInit();\n    },\n    unmounted() {\n        this.unbindResizeListener();\n\n        this.initialized = false;\n    },\n    methods: {\n        viewInit() {\n            if (isVisible(this.element)) {\n                this.setContentEl(this.content);\n                this.init();\n                this.calculateAutoSize();\n\n                this.defaultWidth = getWidth(this.element);\n                this.defaultHeight = getHeight(this.element);\n                this.defaultContentWidth = getWidth(this.content);\n                this.defaultContentHeight = getHeight(this.content);\n                this.initialized = true;\n            }\n\n            if (this.element) {\n                this.bindResizeListener();\n            }\n        },\n        init() {\n            if (!this.disabled) {\n                this.setSize();\n                this.calculateOptions();\n                this.setSpacerSize();\n            }\n        },\n        isVertical() {\n            return this.orientation === 'vertical';\n        },\n        isHorizontal() {\n            return this.orientation === 'horizontal';\n        },\n        isBoth() {\n            return this.orientation === 'both';\n        },\n        scrollTo(options) {\n            //this.lastScrollPos = this.both ? { top: 0, left: 0 } : 0;\n            this.element && this.element.scrollTo(options);\n        },\n        scrollToIndex(index, behavior = 'auto') {\n            const both = this.isBoth();\n            const horizontal = this.isHorizontal();\n            const valid = both ? index.every((i) => i > -1) : index > -1;\n\n            if (valid) {\n                const first = this.first;\n                const { scrollTop = 0, scrollLeft = 0 } = this.element;\n                const { numToleratedItems } = this.calculateNumItems();\n                const contentPos = this.getContentPosition();\n                const itemSize = this.itemSize;\n                const calculateFirst = (_index = 0, _numT) => (_index <= _numT ? 0 : _index);\n                const calculateCoord = (_first, _size, _cpos) => _first * _size + _cpos;\n                const scrollTo = (left = 0, top = 0) => this.scrollTo({ left, top, behavior });\n                let newFirst = both ? { rows: 0, cols: 0 } : 0;\n                let isRangeChanged = false,\n                    isScrollChanged = false;\n\n                if (both) {\n                    newFirst = { rows: calculateFirst(index[0], numToleratedItems[0]), cols: calculateFirst(index[1], numToleratedItems[1]) };\n                    scrollTo(calculateCoord(newFirst.cols, itemSize[1], contentPos.left), calculateCoord(newFirst.rows, itemSize[0], contentPos.top));\n                    isScrollChanged = this.lastScrollPos.top !== scrollTop || this.lastScrollPos.left !== scrollLeft;\n                    isRangeChanged = newFirst.rows !== first.rows || newFirst.cols !== first.cols;\n                } else {\n                    newFirst = calculateFirst(index, numToleratedItems);\n                    horizontal ? scrollTo(calculateCoord(newFirst, itemSize, contentPos.left), scrollTop) : scrollTo(scrollLeft, calculateCoord(newFirst, itemSize, contentPos.top));\n                    isScrollChanged = this.lastScrollPos !== (horizontal ? scrollLeft : scrollTop);\n                    isRangeChanged = newFirst !== first;\n                }\n\n                this.isRangeChanged = isRangeChanged;\n                isScrollChanged && (this.first = newFirst);\n            }\n        },\n        scrollInView(index, to, behavior = 'auto') {\n            if (to) {\n                const both = this.isBoth();\n                const horizontal = this.isHorizontal();\n                const valid = both ? index.every((i) => i > -1) : index > -1;\n\n                if (valid) {\n                    const { first, viewport } = this.getRenderedRange();\n                    const scrollTo = (left = 0, top = 0) => this.scrollTo({ left, top, behavior });\n                    const isToStart = to === 'to-start';\n                    const isToEnd = to === 'to-end';\n\n                    if (isToStart) {\n                        if (both) {\n                            if (viewport.first.rows - first.rows > index[0]) {\n                                scrollTo(viewport.first.cols * this.itemSize[1], (viewport.first.rows - 1) * this.itemSize[0]);\n                            } else if (viewport.first.cols - first.cols > index[1]) {\n                                scrollTo((viewport.first.cols - 1) * this.itemSize[1], viewport.first.rows * this.itemSize[0]);\n                            }\n                        } else {\n                            if (viewport.first - first > index) {\n                                const pos = (viewport.first - 1) * this.itemSize;\n\n                                horizontal ? scrollTo(pos, 0) : scrollTo(0, pos);\n                            }\n                        }\n                    } else if (isToEnd) {\n                        if (both) {\n                            if (viewport.last.rows - first.rows <= index[0] + 1) {\n                                scrollTo(viewport.first.cols * this.itemSize[1], (viewport.first.rows + 1) * this.itemSize[0]);\n                            } else if (viewport.last.cols - first.cols <= index[1] + 1) {\n                                scrollTo((viewport.first.cols + 1) * this.itemSize[1], viewport.first.rows * this.itemSize[0]);\n                            }\n                        } else {\n                            if (viewport.last - first <= index + 1) {\n                                const pos = (viewport.first + 1) * this.itemSize;\n\n                                horizontal ? scrollTo(pos, 0) : scrollTo(0, pos);\n                            }\n                        }\n                    }\n                }\n            } else {\n                this.scrollToIndex(index, behavior);\n            }\n        },\n        getRenderedRange() {\n            const calculateFirstInViewport = (_pos, _size) => Math.floor(_pos / (_size || _pos));\n\n            let firstInViewport = this.first;\n            let lastInViewport = 0;\n\n            if (this.element) {\n                const both = this.isBoth();\n                const horizontal = this.isHorizontal();\n                const { scrollTop, scrollLeft } = this.element;\n\n                if (both) {\n                    firstInViewport = { rows: calculateFirstInViewport(scrollTop, this.itemSize[0]), cols: calculateFirstInViewport(scrollLeft, this.itemSize[1]) };\n                    lastInViewport = { rows: firstInViewport.rows + this.numItemsInViewport.rows, cols: firstInViewport.cols + this.numItemsInViewport.cols };\n                } else {\n                    const scrollPos = horizontal ? scrollLeft : scrollTop;\n\n                    firstInViewport = calculateFirstInViewport(scrollPos, this.itemSize);\n                    lastInViewport = firstInViewport + this.numItemsInViewport;\n                }\n            }\n\n            return {\n                first: this.first,\n                last: this.last,\n                viewport: {\n                    first: firstInViewport,\n                    last: lastInViewport\n                }\n            };\n        },\n        calculateNumItems() {\n            const both = this.isBoth();\n            const horizontal = this.isHorizontal();\n            const itemSize = this.itemSize;\n            const contentPos = this.getContentPosition();\n            const contentWidth = this.element ? this.element.offsetWidth - contentPos.left : 0;\n            const contentHeight = this.element ? this.element.offsetHeight - contentPos.top : 0;\n            const calculateNumItemsInViewport = (_contentSize, _itemSize) => Math.ceil(_contentSize / (_itemSize || _contentSize));\n            const calculateNumToleratedItems = (_numItems) => Math.ceil(_numItems / 2);\n            const numItemsInViewport = both\n                ? { rows: calculateNumItemsInViewport(contentHeight, itemSize[0]), cols: calculateNumItemsInViewport(contentWidth, itemSize[1]) }\n                : calculateNumItemsInViewport(horizontal ? contentWidth : contentHeight, itemSize);\n\n            const numToleratedItems = this.d_numToleratedItems || (both ? [calculateNumToleratedItems(numItemsInViewport.rows), calculateNumToleratedItems(numItemsInViewport.cols)] : calculateNumToleratedItems(numItemsInViewport));\n\n            return { numItemsInViewport, numToleratedItems };\n        },\n        calculateOptions() {\n            const both = this.isBoth();\n            const first = this.first;\n            const { numItemsInViewport, numToleratedItems } = this.calculateNumItems();\n            const calculateLast = (_first, _num, _numT, _isCols = false) => this.getLast(_first + _num + (_first < _numT ? 2 : 3) * _numT, _isCols);\n            const last = both\n                ? { rows: calculateLast(first.rows, numItemsInViewport.rows, numToleratedItems[0]), cols: calculateLast(first.cols, numItemsInViewport.cols, numToleratedItems[1], true) }\n                : calculateLast(first, numItemsInViewport, numToleratedItems);\n\n            this.last = last;\n            this.numItemsInViewport = numItemsInViewport;\n            this.d_numToleratedItems = numToleratedItems;\n            this.$emit('update:numToleratedItems', this.d_numToleratedItems);\n\n            if (this.showLoader) {\n                this.loaderArr = both ? Array.from({ length: numItemsInViewport.rows }).map(() => Array.from({ length: numItemsInViewport.cols })) : Array.from({ length: numItemsInViewport });\n            }\n\n            if (this.lazy) {\n                Promise.resolve().then(() => {\n                    this.lazyLoadState = {\n                        first: this.step ? (both ? { rows: 0, cols: first.cols } : 0) : first,\n                        last: Math.min(this.step ? this.step : last, this.items?.length || 0)\n                    };\n\n                    this.$emit('lazy-load', this.lazyLoadState);\n                });\n            }\n        },\n        calculateAutoSize() {\n            if (this.autoSize && !this.d_loading) {\n                Promise.resolve().then(() => {\n                    if (this.content) {\n                        const both = this.isBoth();\n                        const horizontal = this.isHorizontal();\n                        const vertical = this.isVertical();\n\n                        this.content.style.minHeight = this.content.style.minWidth = 'auto';\n                        this.content.style.position = 'relative';\n                        this.element.style.contain = 'none';\n\n                        /*const [contentWidth, contentHeight] = [getWidth(this.content), getHeight(this.content)];\n\n                        contentWidth !== this.defaultContentWidth && (this.element.style.width = '');\n                        contentHeight !== this.defaultContentHeight && (this.element.style.height = '');*/\n\n                        const [width, height] = [getWidth(this.element), getHeight(this.element)];\n\n                        (both || horizontal) && (this.element.style.width = width < this.defaultWidth ? width + 'px' : this.scrollWidth || this.defaultWidth + 'px');\n                        (both || vertical) && (this.element.style.height = height < this.defaultHeight ? height + 'px' : this.scrollHeight || this.defaultHeight + 'px');\n\n                        this.content.style.minHeight = this.content.style.minWidth = '';\n                        this.content.style.position = '';\n                        this.element.style.contain = '';\n                    }\n                });\n            }\n        },\n        getLast(last = 0, isCols) {\n            return this.items ? Math.min(isCols ? (this.columns || this.items[0])?.length || 0 : this.items?.length || 0, last) : 0;\n        },\n        getContentPosition() {\n            if (this.content) {\n                const style = getComputedStyle(this.content);\n                const left = parseFloat(style.paddingLeft) + Math.max(parseFloat(style.left) || 0, 0);\n                const right = parseFloat(style.paddingRight) + Math.max(parseFloat(style.right) || 0, 0);\n                const top = parseFloat(style.paddingTop) + Math.max(parseFloat(style.top) || 0, 0);\n                const bottom = parseFloat(style.paddingBottom) + Math.max(parseFloat(style.bottom) || 0, 0);\n\n                return { left, right, top, bottom, x: left + right, y: top + bottom };\n            }\n\n            return { left: 0, right: 0, top: 0, bottom: 0, x: 0, y: 0 };\n        },\n        setSize() {\n            if (this.element) {\n                const both = this.isBoth();\n                const horizontal = this.isHorizontal();\n                const parentElement = this.element.parentElement;\n                const width = this.scrollWidth || `${this.element.offsetWidth || parentElement.offsetWidth}px`;\n                const height = this.scrollHeight || `${this.element.offsetHeight || parentElement.offsetHeight}px`;\n                const setProp = (_name, _value) => (this.element.style[_name] = _value);\n\n                if (both || horizontal) {\n                    setProp('height', height);\n                    setProp('width', width);\n                } else {\n                    setProp('height', height);\n                }\n            }\n        },\n        setSpacerSize() {\n            const items = this.items;\n\n            if (items) {\n                const both = this.isBoth();\n                const horizontal = this.isHorizontal();\n                const contentPos = this.getContentPosition();\n                const setProp = (_name, _value, _size, _cpos = 0) => (this.spacerStyle = { ...this.spacerStyle, ...{ [`${_name}`]: (_value || []).length * _size + _cpos + 'px' } });\n\n                if (both) {\n                    setProp('height', items, this.itemSize[0], contentPos.y);\n                    setProp('width', this.columns || items[1], this.itemSize[1], contentPos.x);\n                } else {\n                    horizontal ? setProp('width', this.columns || items, this.itemSize, contentPos.x) : setProp('height', items, this.itemSize, contentPos.y);\n                }\n            }\n        },\n        setContentPosition(pos) {\n            if (this.content && !this.appendOnly) {\n                const both = this.isBoth();\n                const horizontal = this.isHorizontal();\n                const first = pos ? pos.first : this.first;\n                const calculateTranslateVal = (_first, _size) => _first * _size;\n                const setTransform = (_x = 0, _y = 0) => (this.contentStyle = { ...this.contentStyle, ...{ transform: `translate3d(${_x}px, ${_y}px, 0)` } });\n\n                if (both) {\n                    setTransform(calculateTranslateVal(first.cols, this.itemSize[1]), calculateTranslateVal(first.rows, this.itemSize[0]));\n                } else {\n                    const translateVal = calculateTranslateVal(first, this.itemSize);\n\n                    horizontal ? setTransform(translateVal, 0) : setTransform(0, translateVal);\n                }\n            }\n        },\n        onScrollPositionChange(event) {\n            const target = event.target;\n            const both = this.isBoth();\n            const horizontal = this.isHorizontal();\n            const contentPos = this.getContentPosition();\n            const calculateScrollPos = (_pos, _cpos) => (_pos ? (_pos > _cpos ? _pos - _cpos : _pos) : 0);\n            const calculateCurrentIndex = (_pos, _size) => Math.floor(_pos / (_size || _pos));\n\n            const calculateTriggerIndex = (_currentIndex, _first, _last, _num, _numT, _isScrollDownOrRight) => {\n                return _currentIndex <= _numT ? _numT : _isScrollDownOrRight ? _last - _num - _numT : _first + _numT - 1;\n            };\n\n            const calculateFirst = (_currentIndex, _triggerIndex, _first, _last, _num, _numT, _isScrollDownOrRight, _isCols) => {\n                if (_currentIndex <= _numT) return 0;\n                const firstValue = Math.max(0, _isScrollDownOrRight ? (_currentIndex < _triggerIndex ? _first : _currentIndex - _numT) : _currentIndex > _triggerIndex ? _first : _currentIndex - 2 * _numT);\n                const maxFirst = this.getLast(firstValue, _isCols);\n                if (firstValue > maxFirst) return maxFirst - _num;\n                else return firstValue;\n            };\n\n            const calculateLast = (_currentIndex, _first, _last, _num, _numT, _isCols) => {\n                let lastValue = _first + _num + 2 * _numT;\n\n                if (_currentIndex >= _numT) {\n                    lastValue += _numT + 1;\n                }\n\n                return this.getLast(lastValue, _isCols);\n            };\n\n            const scrollTop = calculateScrollPos(target.scrollTop, contentPos.top);\n            const scrollLeft = calculateScrollPos(target.scrollLeft, contentPos.left);\n\n            let newFirst = both ? { rows: 0, cols: 0 } : 0;\n            let newLast = this.last;\n            let isRangeChanged = false;\n            let newScrollPos = this.lastScrollPos;\n\n            if (both) {\n                const isScrollDown = this.lastScrollPos.top <= scrollTop;\n                const isScrollRight = this.lastScrollPos.left <= scrollLeft;\n\n                if (!this.appendOnly || (this.appendOnly && (isScrollDown || isScrollRight))) {\n                    const currentIndex = { rows: calculateCurrentIndex(scrollTop, this.itemSize[0]), cols: calculateCurrentIndex(scrollLeft, this.itemSize[1]) };\n                    const triggerIndex = {\n                        rows: calculateTriggerIndex(currentIndex.rows, this.first.rows, this.last.rows, this.numItemsInViewport.rows, this.d_numToleratedItems[0], isScrollDown),\n                        cols: calculateTriggerIndex(currentIndex.cols, this.first.cols, this.last.cols, this.numItemsInViewport.cols, this.d_numToleratedItems[1], isScrollRight)\n                    };\n\n                    newFirst = {\n                        rows: calculateFirst(currentIndex.rows, triggerIndex.rows, this.first.rows, this.last.rows, this.numItemsInViewport.rows, this.d_numToleratedItems[0], isScrollDown),\n                        cols: calculateFirst(currentIndex.cols, triggerIndex.cols, this.first.cols, this.last.cols, this.numItemsInViewport.cols, this.d_numToleratedItems[1], isScrollRight, true)\n                    };\n                    newLast = {\n                        rows: calculateLast(currentIndex.rows, newFirst.rows, this.last.rows, this.numItemsInViewport.rows, this.d_numToleratedItems[0]),\n                        cols: calculateLast(currentIndex.cols, newFirst.cols, this.last.cols, this.numItemsInViewport.cols, this.d_numToleratedItems[1], true)\n                    };\n\n                    isRangeChanged = newFirst.rows !== this.first.rows || newLast.rows !== this.last.rows || newFirst.cols !== this.first.cols || newLast.cols !== this.last.cols || this.isRangeChanged;\n                    newScrollPos = { top: scrollTop, left: scrollLeft };\n                }\n            } else {\n                const scrollPos = horizontal ? scrollLeft : scrollTop;\n                const isScrollDownOrRight = this.lastScrollPos <= scrollPos;\n\n                if (!this.appendOnly || (this.appendOnly && isScrollDownOrRight)) {\n                    const currentIndex = calculateCurrentIndex(scrollPos, this.itemSize);\n                    const triggerIndex = calculateTriggerIndex(currentIndex, this.first, this.last, this.numItemsInViewport, this.d_numToleratedItems, isScrollDownOrRight);\n\n                    newFirst = calculateFirst(currentIndex, triggerIndex, this.first, this.last, this.numItemsInViewport, this.d_numToleratedItems, isScrollDownOrRight);\n                    newLast = calculateLast(currentIndex, newFirst, this.last, this.numItemsInViewport, this.d_numToleratedItems);\n                    isRangeChanged = newFirst !== this.first || newLast !== this.last || this.isRangeChanged;\n                    newScrollPos = scrollPos;\n                }\n            }\n\n            return {\n                first: newFirst,\n                last: newLast,\n                isRangeChanged,\n                scrollPos: newScrollPos\n            };\n        },\n        onScrollChange(event) {\n            const { first, last, isRangeChanged, scrollPos } = this.onScrollPositionChange(event);\n\n            if (isRangeChanged) {\n                const newState = { first, last };\n\n                this.setContentPosition(newState);\n\n                this.first = first;\n                this.last = last;\n                this.lastScrollPos = scrollPos;\n\n                this.$emit('scroll-index-change', newState);\n\n                if (this.lazy && this.isPageChanged(first)) {\n                    const lazyLoadState = {\n                        first: this.step ? Math.min(this.getPageByFirst(first) * this.step, (this.items?.length || 0) - this.step) : first,\n                        last: Math.min(this.step ? (this.getPageByFirst(first) + 1) * this.step : last, this.items?.length || 0)\n                    };\n                    const isLazyStateChanged = this.lazyLoadState.first !== lazyLoadState.first || this.lazyLoadState.last !== lazyLoadState.last;\n\n                    isLazyStateChanged && this.$emit('lazy-load', lazyLoadState);\n                    this.lazyLoadState = lazyLoadState;\n                }\n            }\n        },\n        onScroll(event) {\n            this.$emit('scroll', event);\n\n            if (this.delay) {\n                if (this.scrollTimeout) {\n                    clearTimeout(this.scrollTimeout);\n                }\n\n                if (this.isPageChanged()) {\n                    if (!this.d_loading && this.showLoader) {\n                        const { isRangeChanged } = this.onScrollPositionChange(event);\n                        const changed = isRangeChanged || (this.step ? this.isPageChanged() : false);\n\n                        changed && (this.d_loading = true);\n                    }\n\n                    this.scrollTimeout = setTimeout(() => {\n                        this.onScrollChange(event);\n\n                        if (this.d_loading && this.showLoader && (!this.lazy || this.loading === undefined)) {\n                            this.d_loading = false;\n                            this.page = this.getPageByFirst();\n                        }\n                    }, this.delay);\n                }\n            } else {\n                this.onScrollChange(event);\n            }\n        },\n        onResize() {\n            if (this.resizeTimeout) {\n                clearTimeout(this.resizeTimeout);\n            }\n\n            this.resizeTimeout = setTimeout(() => {\n                if (isVisible(this.element)) {\n                    const both = this.isBoth();\n                    const vertical = this.isVertical();\n                    const horizontal = this.isHorizontal();\n                    const [width, height] = [getWidth(this.element), getHeight(this.element)];\n                    const [isDiffWidth, isDiffHeight] = [width !== this.defaultWidth, height !== this.defaultHeight];\n                    const reinit = both ? isDiffWidth || isDiffHeight : horizontal ? isDiffWidth : vertical ? isDiffHeight : false;\n\n                    if (reinit) {\n                        this.d_numToleratedItems = this.numToleratedItems;\n                        this.defaultWidth = width;\n                        this.defaultHeight = height;\n                        this.defaultContentWidth = getWidth(this.content);\n                        this.defaultContentHeight = getHeight(this.content);\n\n                        this.init();\n                    }\n                }\n            }, this.resizeDelay);\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = this.onResize.bind(this);\n\n                window.addEventListener('resize', this.resizeListener);\n                window.addEventListener('orientationchange', this.resizeListener);\n\n                this.resizeObserver = new ResizeObserver(() => {\n                    this.onResize();\n                });\n                this.resizeObserver.observe(this.element);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                window.removeEventListener('orientationchange', this.resizeListener);\n                this.resizeListener = null;\n            }\n\n            if (this.resizeObserver) {\n                this.resizeObserver.disconnect();\n                this.resizeObserver = null;\n            }\n        },\n        getOptions(renderedIndex) {\n            const count = (this.items || []).length;\n            const index = this.isBoth() ? this.first.rows + renderedIndex : this.first + renderedIndex;\n\n            return {\n                index,\n                count,\n                first: index === 0,\n                last: index === count - 1,\n                even: index % 2 === 0,\n                odd: index % 2 !== 0\n            };\n        },\n        getLoaderOptions(index, extOptions) {\n            let count = this.loaderArr.length;\n\n            return {\n                index,\n                count,\n                first: index === 0,\n                last: index === count - 1,\n                even: index % 2 === 0,\n                odd: index % 2 !== 0,\n                ...extOptions\n            };\n        },\n        getPageByFirst(first) {\n            return Math.floor(((first ?? this.first) + this.d_numToleratedItems * 4) / (this.step || 1));\n        },\n        isPageChanged(first) {\n            return this.step && !this.lazy ? this.page !== this.getPageByFirst(first ?? this.first) : true;\n        },\n        setContentEl(el) {\n            this.content = el || this.content || findSingle(this.element, '[data-pc-section=\"content\"]');\n        },\n        elementRef(el) {\n            this.element = el;\n        },\n        contentRef(el) {\n            this.content = el;\n        }\n    },\n    computed: {\n        containerClass() {\n            return [\n                'p-virtualscroller',\n                this.class,\n                {\n                    'p-virtualscroller-inline': this.inline,\n                    'p-virtualscroller-both p-both-scroll': this.isBoth(),\n                    'p-virtualscroller-horizontal p-horizontal-scroll': this.isHorizontal()\n                }\n            ];\n        },\n        contentClass() {\n            return [\n                'p-virtualscroller-content',\n                {\n                    'p-virtualscroller-loading': this.d_loading\n                }\n            ];\n        },\n        loaderClass() {\n            return [\n                'p-virtualscroller-loader',\n                {\n                    'p-virtualscroller-loader-mask': !this.$slots.loader\n                }\n            ];\n        },\n        loadedItems() {\n            if (this.items && !this.d_loading) {\n                if (this.isBoth()) return this.items.slice(this.appendOnly ? 0 : this.first.rows, this.last.rows).map((item) => (this.columns ? item : item.slice(this.appendOnly ? 0 : this.first.cols, this.last.cols)));\n                else if (this.isHorizontal() && this.columns) return this.items;\n                else return this.items.slice(this.appendOnly ? 0 : this.first, this.last);\n            }\n\n            return [];\n        },\n        loadedRows() {\n            return this.d_loading ? (this.loaderDisabled ? this.loaderArr : []) : this.loadedItems;\n        },\n        loadedColumns() {\n            if (this.columns) {\n                const both = this.isBoth();\n                const horizontal = this.isHorizontal();\n\n                if (both || horizontal) {\n                    return this.d_loading && this.loaderDisabled ? (both ? this.loaderArr[0] : this.loaderArr) : this.columns.slice(both ? this.first.cols : this.first, both ? this.last.cols : this.last);\n                }\n            }\n\n            return this.columns;\n        }\n    },\n    components: {\n        SpinnerIcon: SpinnerIcon\n    }\n};\n</script>\n", "import { style } from '@primeuix/styles/listbox';\nimport BaseStyle from '@primevue/core/base/style';\n\nconst classes = {\n    root: ({ instance, props }) => [\n        'p-listbox p-component',\n        {\n            'p-listbox-striped': props.striped,\n            'p-disabled': props.disabled,\n            'p-listbox-fluid': props.fluid,\n            'p-invalid': instance.$invalid\n        }\n    ],\n    header: 'p-listbox-header',\n    pcFilter: 'p-listbox-filter',\n    listContainer: 'p-listbox-list-container',\n    list: 'p-listbox-list',\n    optionGroup: 'p-listbox-option-group',\n    option: ({ instance, props, option, index, getItemOptions }) => [\n        'p-listbox-option',\n        {\n            'p-listbox-option-selected': instance.isSelected(option) && props.highlightOnSelect,\n            'p-focus': instance.focusedOptionIndex === instance.getOptionIndex(index, getItemOptions),\n            'p-disabled': instance.isOptionDisabled(option)\n        }\n    ],\n    optionCheckIcon: 'p-listbox-option-check-icon',\n    optionBlankIcon: 'p-listbox-option-blank-icon',\n    emptyMessage: 'p-listbox-empty-message'\n};\n\nexport default BaseStyle.extend({\n    name: 'listbox',\n    style,\n    classes\n});\n", "<script>\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport ListboxStyle from 'primevue/listbox/style';\n\nexport default {\n    name: 'BaseListbox',\n    extends: BaseEditableHolder,\n    props: {\n        options: Array,\n        optionLabel: null,\n        optionValue: null,\n        optionDisabled: null,\n        optionGroupLabel: null,\n        optionGroupChildren: null,\n        listStyle: null,\n        scrollHeight: {\n            type: String,\n            default: '14rem'\n        },\n        dataKey: null,\n        multiple: {\n            type: Boolean,\n            default: false\n        },\n        metaKeySelection: {\n            type: Boolean,\n            default: false\n        },\n        filter: Boolean,\n        filterPlaceholder: String,\n        filterLocale: String,\n        filterMatchMode: {\n            type: String,\n            default: 'contains'\n        },\n        filterFields: {\n            type: Array,\n            default: null\n        },\n        virtualScrollerOptions: {\n            type: Object,\n            default: null\n        },\n        autoOptionFocus: {\n            type: Boolean,\n            default: true\n        },\n        selectOnFocus: {\n            type: Boolean,\n            default: false\n        },\n        focusOnHover: {\n            type: Boolean,\n            default: true\n        },\n        highlightOnSelect: {\n            type: Boolean,\n            default: true\n        },\n        checkmark: {\n            type: Boolean,\n            default: false\n        },\n        filterMessage: {\n            type: String,\n            default: null\n        },\n        selectionMessage: {\n            type: String,\n            default: null\n        },\n        emptySelectionMessage: {\n            type: String,\n            default: null\n        },\n        emptyFilterMessage: {\n            type: String,\n            default: null\n        },\n        emptyMessage: {\n            type: String,\n            default: null\n        },\n        filterIcon: {\n            type: String,\n            default: undefined\n        },\n        striped: {\n            type: Boolean,\n            default: false\n        },\n        tabindex: {\n            type: Number,\n            default: 0\n        },\n        fluid: {\n            type: Boolean,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        }\n    },\n    style: ListboxStyle,\n    provide() {\n        return {\n            $pcListbox: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div :id=\"$id\" :class=\"cx('root')\" @focusout=\"onFocusout\" :data-p=\"containerDataP\" v-bind=\"ptmi('root')\">\n        <span\n            ref=\"firstHiddenFocusableElement\"\n            role=\"presentation\"\n            aria-hidden=\"true\"\n            class=\"p-hidden-accessible p-hidden-focusable\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            @focus=\"onFirstHiddenFocus\"\n            v-bind=\"ptm('hiddenFirstFocusableEl')\"\n            :data-p-hidden-accessible=\"true\"\n            :data-p-hidden-focusable=\"true\"\n        ></span>\n        <div v-if=\"$slots.header\" :class=\"cx('header')\">\n            <slot name=\"header\" :value=\"d_value\" :options=\"visibleOptions\"></slot>\n        </div>\n        <div v-if=\"filter\" :class=\"cx('header')\" v-bind=\"ptm('header')\">\n            <IconField :unstyled=\"unstyled\" :pt=\"ptm('pcFilterContainer')\">\n                <InputText\n                    v-model=\"filterValue\"\n                    type=\"text\"\n                    :class=\"cx('pcFilter')\"\n                    :placeholder=\"filterPlaceholder\"\n                    role=\"searchbox\"\n                    autocomplete=\"off\"\n                    :disabled=\"disabled\"\n                    :unstyled=\"unstyled\"\n                    :aria-owns=\"$id + '_list'\"\n                    :aria-activedescendant=\"focusedOptionId\"\n                    :tabindex=\"!disabled && !focused ? tabindex : -1\"\n                    @input=\"onFilterChange\"\n                    @blur=\"onFilterBlur\"\n                    @keydown=\"onFilterKeyDown\"\n                    :pt=\"ptm('pcFilter')\"\n                />\n                <InputIcon :unstyled=\"unstyled\" :pt=\"ptm('pcFilterIconContainer')\">\n                    <slot name=\"filtericon\">\n                        <span v-if=\"filterIcon\" :class=\"filterIcon\" v-bind=\"ptm('filterIcon')\" />\n                        <SearchIcon v-else v-bind=\"ptm('filterIcon')\" />\n                    </slot>\n                </InputIcon>\n            </IconField>\n            <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenFilterResult')\" :data-p-hidden-accessible=\"true\">\n                {{ filterResultMessageText }}\n            </span>\n        </div>\n        <div :class=\"cx('listContainer')\" :style=\"[{ 'max-height': virtualScrollerDisabled ? scrollHeight : '' }, listStyle]\" v-bind=\"ptm('listContainer')\">\n            <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :items=\"visibleOptions\" :style=\"[{ height: scrollHeight }, listStyle]\" :tabindex=\"-1\" :disabled=\"virtualScrollerDisabled\" :pt=\"ptm('virtualScroller')\">\n                <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions, contentStyle, itemSize }\">\n                    <ul\n                        :ref=\"(el) => listRef(el, contentRef)\"\n                        :id=\"$id + '_list'\"\n                        :class=\"[cx('list'), styleClass]\"\n                        :style=\"contentStyle\"\n                        :tabindex=\"-1\"\n                        role=\"listbox\"\n                        :aria-multiselectable=\"multiple\"\n                        :aria-label=\"ariaLabel\"\n                        :aria-labelledby=\"ariaLabelledby\"\n                        :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n                        :aria-disabled=\"disabled\"\n                        @focus=\"onListFocus\"\n                        @blur=\"onListBlur\"\n                        @keydown=\"onListKeyDown\"\n                        v-bind=\"ptm('list')\"\n                    >\n                        <template v-for=\"(option, i) of items\" :key=\"getOptionRenderKey(option, getOptionIndex(i, getItemOptions))\">\n                            <li v-if=\"isOptionGroup(option)\" :id=\"$id + '_' + getOptionIndex(i, getItemOptions)\" :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\" :class=\"cx('optionGroup')\" role=\"option\" v-bind=\"ptm('optionGroup')\">\n                                <slot name=\"optiongroup\" :option=\"option.optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionGroupLabel(option.optionGroup) }}</slot>\n                            </li>\n                            <li\n                                v-else\n                                :id=\"$id + '_' + getOptionIndex(i, getItemOptions)\"\n                                v-ripple\n                                :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                :class=\"cx('option', { option, index: i, getItemOptions })\"\n                                role=\"option\"\n                                :aria-label=\"getOptionLabel(option)\"\n                                :aria-selected=\"isSelected(option)\"\n                                :aria-disabled=\"isOptionDisabled(option)\"\n                                :aria-setsize=\"ariaSetSize\"\n                                :aria-posinset=\"getAriaPosInset(getOptionIndex(i, getItemOptions))\"\n                                @click=\"onOptionSelect($event, option, getOptionIndex(i, getItemOptions))\"\n                                @mousedown=\"onOptionMouseDown($event, getOptionIndex(i, getItemOptions))\"\n                                @mousemove=\"onOptionMouseMove($event, getOptionIndex(i, getItemOptions))\"\n                                @touchend=\"onOptionTouchEnd()\"\n                                @dblclick=\"onOptionDblClick($event, option)\"\n                                v-bind=\"getPTOptions(option, getItemOptions, i, 'option')\"\n                                :data-p-selected=\"!checkmark && isSelected(option)\"\n                                :data-p-focused=\"focusedOptionIndex === getOptionIndex(i, getItemOptions)\"\n                                :data-p-disabled=\"isOptionDisabled(option)\"\n                            >\n                                <template v-if=\"checkmark\">\n                                    <CheckIcon v-if=\"isSelected(option)\" :class=\"cx('optionCheckIcon')\" v-bind=\"ptm('optionCheckIcon')\" />\n                                    <BlankIcon v-else :class=\"cx('optionBlankIcon')\" v-bind=\"ptm('optionBlankIcon')\" />\n                                </template>\n                                <slot name=\"option\" :option=\"option\" :selected=\"isSelected(option)\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionLabel(option) }}</slot>\n                            </li>\n                        </template>\n                        <li v-if=\"filterValue && (!items || (items && items.length === 0))\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                            <slot name=\"emptyfilter\">{{ emptyFilterMessageText }}</slot>\n                        </li>\n                        <li v-else-if=\"!options || (options && options.length === 0)\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                            <slot name=\"empty\">{{ emptyMessageText }}</slot>\n                        </li>\n                    </ul>\n                </template>\n                <template v-if=\"$slots.loader\" v-slot:loader=\"{ options }\">\n                    <slot name=\"loader\" :options=\"options\"></slot>\n                </template>\n            </VirtualScroller>\n        </div>\n        <slot name=\"footer\" :value=\"d_value\" :options=\"visibleOptions\"></slot>\n        <span v-if=\"!options || (options && options.length === 0)\" role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenEmptyMessage')\" :data-p-hidden-accessible=\"true\">\n            {{ emptyMessageText }}\n        </span>\n        <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSelectedMessage')\" :data-p-hidden-accessible=\"true\">\n            {{ selectedMessageText }}\n        </span>\n        <span\n            ref=\"lastHiddenFocusableElement\"\n            role=\"presentation\"\n            aria-hidden=\"true\"\n            class=\"p-hidden-accessible p-hidden-focusable\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            @focus=\"onLastHiddenFocus\"\n            v-bind=\"ptm('hiddenLastFocusableEl')\"\n            :data-p-hidden-accessible=\"true\"\n            :data-p-hidden-focusable=\"true\"\n        ></span>\n    </div>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport { findSingle, focus, getFirstFocusableElement, isElement } from '@primeuix/utils/dom';\nimport { equals, findLastIndex, isNotEmpty, isPrintableCharacter, resolveFieldData } from '@primeuix/utils/object';\nimport { FilterService } from '@primevue/core/api';\nimport BlankIcon from '@primevue/icons/blank';\nimport CheckIcon from '@primevue/icons/check';\nimport SearchIcon from '@primevue/icons/search';\nimport IconField from 'primevue/iconfield';\nimport InputIcon from 'primevue/inputicon';\nimport InputText from 'primevue/inputtext';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseListbox from './BaseListbox.vue';\n\nexport default {\n    name: 'Listbox',\n    extends: BaseListbox,\n    inheritAttrs: false,\n    emits: ['change', 'focus', 'blur', 'filter', 'item-dblclick', 'option-dblclick'],\n    list: null,\n    virtualScroller: null,\n    optionTouched: false,\n    startRangeIndex: -1,\n    searchTimeout: null,\n    searchValue: '',\n    data() {\n        return {\n            filterValue: null,\n            focused: false,\n            focusedOptionIndex: -1\n        };\n    },\n    watch: {\n        options() {\n            this.autoUpdateModel();\n        }\n    },\n    mounted() {\n        this.autoUpdateModel();\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : typeof option === 'string' ? option : null;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option, index) {\n            return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n        },\n        getPTOptions(option, itemOptions, index, key) {\n            return this.ptm(key, {\n                context: {\n                    selected: this.isSelected(option),\n                    focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n                    disabled: this.isOptionDisabled(option)\n                }\n            });\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionGroup(option) {\n            return this.optionGroupLabel && option.optionGroup && option.group;\n        },\n        getOptionGroupLabel(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getAriaPosInset(index) {\n            return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;\n        },\n        onFirstHiddenFocus() {\n            focus(this.list);\n\n            const firstFocusableEl = getFirstFocusableElement(this.$el, ':not([data-p-hidden-focusable=\"true\"])');\n\n            this.$refs.lastHiddenFocusableElement.tabIndex = isElement(firstFocusableEl) ? undefined : -1;\n            this.$refs.firstHiddenFocusableElement.tabIndex = -1;\n        },\n        onLastHiddenFocus(event) {\n            const relatedTarget = event.relatedTarget;\n\n            if (relatedTarget === this.list) {\n                const firstFocusableEl = getFirstFocusableElement(this.$el, ':not([data-p-hidden-focusable=\"true\"])');\n\n                focus(firstFocusableEl);\n                this.$refs.firstHiddenFocusableElement.tabIndex = undefined;\n            } else {\n                focus(this.$refs.firstHiddenFocusableElement);\n            }\n\n            this.$refs.lastHiddenFocusableElement.tabIndex = -1;\n        },\n        onFocusout(event) {\n            if (!this.$el.contains(event.relatedTarget) && this.$refs.lastHiddenFocusableElement && this.$refs.firstHiddenFocusableElement) {\n                this.$refs.lastHiddenFocusableElement.tabIndex = this.$refs.firstHiddenFocusableElement.tabIndex = undefined;\n            }\n        },\n        onListFocus(event) {\n            this.focused = true;\n            this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.findSelectedOptionIndex();\n            this.autoUpdateModel();\n            this.scrollInView(this.focusedOptionIndex);\n            this.$emit('focus', event);\n        },\n        onListBlur(event) {\n            this.focused = false;\n            this.focusedOptionIndex = this.startRangeIndex = -1;\n            this.searchValue = '';\n            this.$emit('blur', event);\n        },\n        onListKeyDown(event) {\n            const metaKey = event.metaKey || event.ctrlKey;\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    this.onSpaceKey(event);\n                    break;\n\n                case 'Tab':\n                    //NOOP\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    this.onShiftKey(event);\n                    break;\n\n                default:\n                    if (this.multiple && event.code === 'KeyA' && metaKey) {\n                        const value = this.visibleOptions.filter((option) => this.isValidOption(option)).map((option) => this.getOptionValue(option));\n\n                        this.updateModel(event, value);\n\n                        event.preventDefault();\n                        break;\n                    }\n\n                    if (!metaKey && isPrintableCharacter(event.key)) {\n                        this.searchOptions(event, event.key);\n                        event.preventDefault();\n                    }\n\n                    break;\n            }\n        },\n        onOptionSelect(event, option, index = -1) {\n            if (this.disabled || this.isOptionDisabled(option)) {\n                return;\n            }\n\n            this.multiple ? this.onOptionSelectMultiple(event, option) : this.onOptionSelectSingle(event, option);\n            this.optionTouched = false;\n            index !== -1 && (this.focusedOptionIndex = index);\n        },\n        onOptionMouseDown(event, index) {\n            this.changeFocusedOptionIndex(event, index);\n        },\n        onOptionMouseMove(event, index) {\n            if (this.focusOnHover && this.focused) {\n                this.changeFocusedOptionIndex(event, index);\n            }\n        },\n        onOptionTouchEnd() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.optionTouched = true;\n        },\n        onOptionDblClick(event, item) {\n            this.$emit('item-dblclick', {\n                originalEvent: event,\n                value: item\n            });\n            this.$emit('option-dblclick', {\n                originalEvent: event,\n                value: item\n            });\n        },\n        onOptionSelectSingle(event, option) {\n            let selected = this.isSelected(option);\n            let valueChanged = false;\n            let value = null;\n            let metaSelection = this.optionTouched ? false : this.metaKeySelection;\n            const _value = this.getOptionValue(option) !== '' ? this.getOptionValue(option) : this.getOptionLabel(option);\n\n            if (metaSelection) {\n                let metaKey = event && (event.metaKey || event.ctrlKey);\n\n                if (selected) {\n                    if (metaKey) {\n                        value = null;\n                        valueChanged = true;\n                    }\n                } else {\n                    value = _value;\n                    valueChanged = true;\n                }\n            } else {\n                value = selected ? null : _value;\n                valueChanged = true;\n            }\n\n            if (valueChanged) {\n                this.updateModel(event, value);\n            }\n        },\n        onOptionSelectMultiple(event, option) {\n            let selected = this.isSelected(option);\n            let value = null;\n            let metaSelection = this.optionTouched ? false : this.metaKeySelection;\n            const _value = this.getOptionValue(option) !== '' ? this.getOptionValue(option) : this.getOptionLabel(option);\n\n            if (metaSelection) {\n                let metaKey = event.metaKey || event.ctrlKey;\n\n                if (selected) {\n                    value = metaKey ? this.removeOption(option) : [_value];\n                } else {\n                    value = metaKey ? this.d_value || [] : [];\n                    value = [...value, _value];\n                }\n            } else {\n                value = selected ? this.removeOption(option) : [...(this.d_value || []), _value];\n            }\n\n            this.updateModel(event, value);\n        },\n        onOptionSelectRange(event, start = -1, end = -1) {\n            start === -1 && (start = this.findNearestSelectedOptionIndex(end, true));\n            end === -1 && (end = this.findNearestSelectedOptionIndex(start));\n\n            if (start !== -1 && end !== -1) {\n                const rangeStart = Math.min(start, end);\n                const rangeEnd = Math.max(start, end);\n                const value = this.visibleOptions\n                    .slice(rangeStart, rangeEnd + 1)\n                    .filter((option) => this.isValidOption(option))\n                    .map((option) => this.getOptionValue(option));\n\n                this.updateModel(event, value);\n            }\n        },\n        onFilterChange(event) {\n            this.$emit('filter', { originalEvent: event, value: event.target.value, filterValue: this.visibleOptions });\n            this.focusedOptionIndex = this.startRangeIndex = -1;\n        },\n        onFilterBlur() {\n            this.focusedOptionIndex = this.startRangeIndex = -1;\n        },\n        onFilterKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                case 'ArrowRight':\n                    this.onArrowLeftKey(event, true);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event, true);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event, true);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    this.onShiftKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            const optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.findFirstFocusedOptionIndex();\n\n            if (this.multiple && event.shiftKey) {\n                this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n            }\n\n            this.changeFocusedOptionIndex(event, optionIndex);\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            const optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.findLastFocusedOptionIndex();\n\n            if (this.multiple && event.shiftKey) {\n                this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n            }\n\n            this.changeFocusedOptionIndex(event, optionIndex);\n            event.preventDefault();\n        },\n        onArrowLeftKey(event, pressedInInputText = false) {\n            pressedInInputText && (this.focusedOptionIndex = -1);\n        },\n        onHomeKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(0, event.target.selectionStart);\n                } else {\n                    target.setSelectionRange(0, 0);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                let metaKey = event.metaKey || event.ctrlKey;\n                let optionIndex = this.findFirstOptionIndex();\n\n                if (this.multiple && event.shiftKey && metaKey) {\n                    this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n            }\n\n            event.preventDefault();\n        },\n        onEndKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(event.target.selectionStart, target.value.length);\n                } else {\n                    const len = target.value.length;\n\n                    target.setSelectionRange(len, len);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                let metaKey = event.metaKey || event.ctrlKey;\n                let optionIndex = this.findLastOptionIndex();\n\n                if (this.multiple && event.shiftKey && metaKey) {\n                    this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n            }\n\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView(0);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView(this.visibleOptions.length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (this.focusedOptionIndex !== -1) {\n                if (this.multiple && event.shiftKey) this.onOptionSelectRange(event, this.focusedOptionIndex);\n                else this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n            }\n        },\n        onSpaceKey(event) {\n            event.preventDefault();\n            this.onEnterKey(event);\n        },\n        onShiftKey() {\n            this.startRangeIndex = this.focusedOptionIndex;\n        },\n        isOptionMatched(option) {\n            return this.isValidOption(option) && typeof this.getOptionLabel(option) === 'string' && this.getOptionLabel(option)?.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale));\n        },\n        isValidOption(option) {\n            return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n        },\n        isValidSelectedOption(option) {\n            return this.isValidOption(option) && this.isSelected(option);\n        },\n        isEquals(value1, value2) {\n            return equals(value1, value2, this.equalityKey);\n        },\n        isSelected(option) {\n            const optionValue = this.getOptionValue(option) !== '' ? this.getOptionValue(option) : this.getOptionLabel(option);\n\n            if (this.multiple) return (this.d_value || []).some((value) => this.isEquals(value, optionValue));\n            else return this.isEquals(this.d_value, optionValue);\n        },\n        findFirstOptionIndex() {\n            return this.visibleOptions.findIndex((option) => this.isValidOption(option));\n        },\n        findLastOptionIndex() {\n            return findLastIndex(this.visibleOptions, (option) => this.isValidOption(option));\n        },\n        findNextOptionIndex(index) {\n            const matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n        },\n        findPrevOptionIndex(index) {\n            const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findSelectedOptionIndex() {\n            if (this.$filled) {\n                if (this.multiple) {\n                    for (let index = this.d_value.length - 1; index >= 0; index--) {\n                        const value = this.d_value[index];\n                        const matchedOptionIndex = this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option) && this.isEquals(value, this.getOptionValue(option)));\n\n                        if (matchedOptionIndex > -1) return matchedOptionIndex;\n                    }\n                } else {\n                    return this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option));\n                }\n            }\n\n            return -1;\n        },\n        findFirstSelectedOptionIndex() {\n            return this.$filled ? this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findLastSelectedOptionIndex() {\n            return this.$filled ? findLastIndex(this.visibleOptions, (option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findNextSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.$filled && index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : -1;\n        },\n        findPrevSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.$filled && index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : -1;\n        },\n        findNearestSelectedOptionIndex(index, firstCheckUp = false) {\n            let matchedOptionIndex = -1;\n\n            if (this.$filled) {\n                if (firstCheckUp) {\n                    matchedOptionIndex = this.findPrevSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findNextSelectedOptionIndex(index) : matchedOptionIndex;\n                } else {\n                    matchedOptionIndex = this.findNextSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findPrevSelectedOptionIndex(index) : matchedOptionIndex;\n                }\n            }\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findFirstFocusedOptionIndex() {\n            const selectedIndex = this.findFirstSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n        },\n        findLastFocusedOptionIndex() {\n            const selectedIndex = this.findLastSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n        },\n        searchOptions(event, char) {\n            this.searchValue = (this.searchValue || '') + char;\n\n            let optionIndex = -1;\n\n            if (isNotEmpty(this.searchValue)) {\n                if (this.focusedOptionIndex !== -1) {\n                    optionIndex = this.visibleOptions.slice(this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option));\n                    optionIndex = optionIndex === -1 ? this.visibleOptions.slice(0, this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option)) : optionIndex + this.focusedOptionIndex;\n                } else {\n                    optionIndex = this.visibleOptions.findIndex((option) => this.isOptionMatched(option));\n                }\n\n                if (optionIndex === -1 && this.focusedOptionIndex === -1) {\n                    optionIndex = this.findFirstFocusedOptionIndex();\n                }\n\n                if (optionIndex !== -1) {\n                    this.changeFocusedOptionIndex(event, optionIndex);\n                }\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(() => {\n                this.searchValue = '';\n                this.searchTimeout = null;\n            }, 500);\n        },\n        removeOption(option) {\n            return this.d_value.filter((val) => !equals(val, this.getOptionValue(option), this.equalityKey));\n        },\n        changeFocusedOptionIndex(event, index) {\n            if (this.focusedOptionIndex !== index) {\n                this.focusedOptionIndex = index;\n                this.scrollInView();\n\n                if (this.selectOnFocus && !this.multiple) {\n                    this.onOptionSelect(event, this.visibleOptions[index]);\n                }\n            }\n        },\n        scrollInView(index = -1) {\n            this.$nextTick(() => {\n                const id = index !== -1 ? `${this.$id}_${index}` : this.focusedOptionId;\n                const element = findSingle(this.list, `li[id=\"${id}\"]`);\n\n                if (element) {\n                    element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'nearest', behavior: 'smooth' });\n                } else if (!this.virtualScrollerDisabled) {\n                    this.virtualScroller && this.virtualScroller.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex);\n                }\n            });\n        },\n        autoUpdateModel() {\n            if (this.selectOnFocus && this.autoOptionFocus && !this.$filled && !this.multiple && this.focused) {\n                this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n                this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex]);\n            }\n        },\n        updateModel(event, value) {\n            this.writeValue(value, event);\n            this.$emit('change', { originalEvent: event, value });\n        },\n        listRef(el, contentRef) {\n            this.list = el;\n            contentRef && contentRef(el); // For VirtualScroller\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        }\n    },\n    computed: {\n        optionsListFlat() {\n            return this.filterValue ? FilterService.filter(this.options, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale) : this.options;\n        },\n        optionsListGroup() {\n            const filteredOptions = [];\n\n            (this.options || []).forEach((optionGroup) => {\n                const optionGroupChildren = this.getOptionGroupChildren(optionGroup) || [];\n                const filteredChildren = this.filterValue ? FilterService.filter(optionGroupChildren, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale) : optionGroupChildren;\n\n                if (filteredChildren?.length) {\n                    filteredOptions.push({ optionGroup, group: true }, ...filteredChildren);\n                }\n            });\n\n            return filteredOptions;\n        },\n        visibleOptions() {\n            return this.optionGroupLabel ? this.optionsListGroup : this.optionsListFlat;\n        },\n        // @deprecated use $filled instead\n        hasSelectedOption() {\n            return isNotEmpty(this.d_value);\n        },\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        },\n        searchFields() {\n            return this.filterFields || [this.optionLabel];\n        },\n        filterResultMessageText() {\n            return isNotEmpty(this.visibleOptions) ? this.filterMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptyFilterMessageText;\n        },\n        filterMessageText() {\n            return this.filterMessage || this.$primevue.config.locale.searchMessage || '';\n        },\n        emptyFilterMessageText() {\n            return this.emptyFilterMessage || this.$primevue.config.locale.emptySearchMessage || this.$primevue.config.locale.emptyFilterMessage || '';\n        },\n        emptyMessageText() {\n            return this.emptyMessage || this.$primevue.config.locale.emptyMessage || '';\n        },\n        selectionMessageText() {\n            return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n        },\n        emptySelectionMessageText() {\n            return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n        },\n        selectedMessageText() {\n            return this.$filled ? this.selectionMessageText.replaceAll('{0}', this.multiple ? this.d_value.length : '1') : this.emptySelectionMessageText;\n        },\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? `${this.$id}_${this.focusedOptionIndex}` : null;\n        },\n        ariaSetSize() {\n            return this.visibleOptions.filter((option) => !this.isOptionGroup(option)).length;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        },\n        containerDataP() {\n            return cn({\n                invalid: this.$invalid,\n                disabled: this.disabled\n            });\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        InputText,\n        VirtualScroller,\n        InputIcon,\n        IconField,\n        SearchIcon,\n        CheckIcon,\n        BlankIcon\n    }\n};\n</script>\n", "<template>\n    <div :id=\"$id\" :class=\"cx('root')\" @focusout=\"onFocusout\" :data-p=\"containerDataP\" v-bind=\"ptmi('root')\">\n        <span\n            ref=\"firstHiddenFocusableElement\"\n            role=\"presentation\"\n            aria-hidden=\"true\"\n            class=\"p-hidden-accessible p-hidden-focusable\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            @focus=\"onFirstHiddenFocus\"\n            v-bind=\"ptm('hiddenFirstFocusableEl')\"\n            :data-p-hidden-accessible=\"true\"\n            :data-p-hidden-focusable=\"true\"\n        ></span>\n        <div v-if=\"$slots.header\" :class=\"cx('header')\">\n            <slot name=\"header\" :value=\"d_value\" :options=\"visibleOptions\"></slot>\n        </div>\n        <div v-if=\"filter\" :class=\"cx('header')\" v-bind=\"ptm('header')\">\n            <IconField :unstyled=\"unstyled\" :pt=\"ptm('pcFilterContainer')\">\n                <InputText\n                    v-model=\"filterValue\"\n                    type=\"text\"\n                    :class=\"cx('pcFilter')\"\n                    :placeholder=\"filterPlaceholder\"\n                    role=\"searchbox\"\n                    autocomplete=\"off\"\n                    :disabled=\"disabled\"\n                    :unstyled=\"unstyled\"\n                    :aria-owns=\"$id + '_list'\"\n                    :aria-activedescendant=\"focusedOptionId\"\n                    :tabindex=\"!disabled && !focused ? tabindex : -1\"\n                    @input=\"onFilterChange\"\n                    @blur=\"onFilterBlur\"\n                    @keydown=\"onFilterKeyDown\"\n                    :pt=\"ptm('pcFilter')\"\n                />\n                <InputIcon :unstyled=\"unstyled\" :pt=\"ptm('pcFilterIconContainer')\">\n                    <slot name=\"filtericon\">\n                        <span v-if=\"filterIcon\" :class=\"filterIcon\" v-bind=\"ptm('filterIcon')\" />\n                        <SearchIcon v-else v-bind=\"ptm('filterIcon')\" />\n                    </slot>\n                </InputIcon>\n            </IconField>\n            <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenFilterResult')\" :data-p-hidden-accessible=\"true\">\n                {{ filterResultMessageText }}\n            </span>\n        </div>\n        <div :class=\"cx('listContainer')\" :style=\"[{ 'max-height': virtualScrollerDisabled ? scrollHeight : '' }, listStyle]\" v-bind=\"ptm('listContainer')\">\n            <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :items=\"visibleOptions\" :style=\"[{ height: scrollHeight }, listStyle]\" :tabindex=\"-1\" :disabled=\"virtualScrollerDisabled\" :pt=\"ptm('virtualScroller')\">\n                <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions, contentStyle, itemSize }\">\n                    <ul\n                        :ref=\"(el) => listRef(el, contentRef)\"\n                        :id=\"$id + '_list'\"\n                        :class=\"[cx('list'), styleClass]\"\n                        :style=\"contentStyle\"\n                        :tabindex=\"-1\"\n                        role=\"listbox\"\n                        :aria-multiselectable=\"multiple\"\n                        :aria-label=\"ariaLabel\"\n                        :aria-labelledby=\"ariaLabelledby\"\n                        :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n                        :aria-disabled=\"disabled\"\n                        @focus=\"onListFocus\"\n                        @blur=\"onListBlur\"\n                        @keydown=\"onListKeyDown\"\n                        v-bind=\"ptm('list')\"\n                    >\n                        <template v-for=\"(option, i) of items\" :key=\"getOptionRenderKey(option, getOptionIndex(i, getItemOptions))\">\n                            <li v-if=\"isOptionGroup(option)\" :id=\"$id + '_' + getOptionIndex(i, getItemOptions)\" :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\" :class=\"cx('optionGroup')\" role=\"option\" v-bind=\"ptm('optionGroup')\">\n                                <slot name=\"optiongroup\" :option=\"option.optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionGroupLabel(option.optionGroup) }}</slot>\n                            </li>\n                            <li\n                                v-else\n                                :id=\"$id + '_' + getOptionIndex(i, getItemOptions)\"\n                                v-ripple\n                                :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                :class=\"cx('option', { option, index: i, getItemOptions })\"\n                                role=\"option\"\n                                :aria-label=\"getOptionLabel(option)\"\n                                :aria-selected=\"isSelected(option)\"\n                                :aria-disabled=\"isOptionDisabled(option)\"\n                                :aria-setsize=\"ariaSetSize\"\n                                :aria-posinset=\"getAriaPosInset(getOptionIndex(i, getItemOptions))\"\n                                @click=\"onOptionSelect($event, option, getOptionIndex(i, getItemOptions))\"\n                                @mousedown=\"onOptionMouseDown($event, getOptionIndex(i, getItemOptions))\"\n                                @mousemove=\"onOptionMouseMove($event, getOptionIndex(i, getItemOptions))\"\n                                @touchend=\"onOptionTouchEnd()\"\n                                @dblclick=\"onOptionDblClick($event, option)\"\n                                v-bind=\"getPTOptions(option, getItemOptions, i, 'option')\"\n                                :data-p-selected=\"!checkmark && isSelected(option)\"\n                                :data-p-focused=\"focusedOptionIndex === getOptionIndex(i, getItemOptions)\"\n                                :data-p-disabled=\"isOptionDisabled(option)\"\n                            >\n                                <template v-if=\"checkmark\">\n                                    <CheckIcon v-if=\"isSelected(option)\" :class=\"cx('optionCheckIcon')\" v-bind=\"ptm('optionCheckIcon')\" />\n                                    <BlankIcon v-else :class=\"cx('optionBlankIcon')\" v-bind=\"ptm('optionBlankIcon')\" />\n                                </template>\n                                <slot name=\"option\" :option=\"option\" :selected=\"isSelected(option)\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionLabel(option) }}</slot>\n                            </li>\n                        </template>\n                        <li v-if=\"filterValue && (!items || (items && items.length === 0))\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                            <slot name=\"emptyfilter\">{{ emptyFilterMessageText }}</slot>\n                        </li>\n                        <li v-else-if=\"!options || (options && options.length === 0)\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                            <slot name=\"empty\">{{ emptyMessageText }}</slot>\n                        </li>\n                    </ul>\n                </template>\n                <template v-if=\"$slots.loader\" v-slot:loader=\"{ options }\">\n                    <slot name=\"loader\" :options=\"options\"></slot>\n                </template>\n            </VirtualScroller>\n        </div>\n        <slot name=\"footer\" :value=\"d_value\" :options=\"visibleOptions\"></slot>\n        <span v-if=\"!options || (options && options.length === 0)\" role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenEmptyMessage')\" :data-p-hidden-accessible=\"true\">\n            {{ emptyMessageText }}\n        </span>\n        <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSelectedMessage')\" :data-p-hidden-accessible=\"true\">\n            {{ selectedMessageText }}\n        </span>\n        <span\n            ref=\"lastHiddenFocusableElement\"\n            role=\"presentation\"\n            aria-hidden=\"true\"\n            class=\"p-hidden-accessible p-hidden-focusable\"\n            :tabindex=\"!disabled ? tabindex : -1\"\n            @focus=\"onLastHiddenFocus\"\n            v-bind=\"ptm('hiddenLastFocusableEl')\"\n            :data-p-hidden-accessible=\"true\"\n            :data-p-hidden-focusable=\"true\"\n        ></span>\n    </div>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport { findSingle, focus, getFirstFocusableElement, isElement } from '@primeuix/utils/dom';\nimport { equals, findLastIndex, isNotEmpty, isPrintableCharacter, resolveFieldData } from '@primeuix/utils/object';\nimport { FilterService } from '@primevue/core/api';\nimport BlankIcon from '@primevue/icons/blank';\nimport CheckIcon from '@primevue/icons/check';\nimport SearchIcon from '@primevue/icons/search';\nimport IconField from 'primevue/iconfield';\nimport InputIcon from 'primevue/inputicon';\nimport InputText from 'primevue/inputtext';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseListbox from './BaseListbox.vue';\n\nexport default {\n    name: 'Listbox',\n    extends: BaseListbox,\n    inheritAttrs: false,\n    emits: ['change', 'focus', 'blur', 'filter', 'item-dblclick', 'option-dblclick'],\n    list: null,\n    virtualScroller: null,\n    optionTouched: false,\n    startRangeIndex: -1,\n    searchTimeout: null,\n    searchValue: '',\n    data() {\n        return {\n            filterValue: null,\n            focused: false,\n            focusedOptionIndex: -1\n        };\n    },\n    watch: {\n        options() {\n            this.autoUpdateModel();\n        }\n    },\n    mounted() {\n        this.autoUpdateModel();\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : typeof option === 'string' ? option : null;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option, index) {\n            return (this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option)) + '_' + index;\n        },\n        getPTOptions(option, itemOptions, index, key) {\n            return this.ptm(key, {\n                context: {\n                    selected: this.isSelected(option),\n                    focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n                    disabled: this.isOptionDisabled(option)\n                }\n            });\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionGroup(option) {\n            return this.optionGroupLabel && option.optionGroup && option.group;\n        },\n        getOptionGroupLabel(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getAriaPosInset(index) {\n            return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;\n        },\n        onFirstHiddenFocus() {\n            focus(this.list);\n\n            const firstFocusableEl = getFirstFocusableElement(this.$el, ':not([data-p-hidden-focusable=\"true\"])');\n\n            this.$refs.lastHiddenFocusableElement.tabIndex = isElement(firstFocusableEl) ? undefined : -1;\n            this.$refs.firstHiddenFocusableElement.tabIndex = -1;\n        },\n        onLastHiddenFocus(event) {\n            const relatedTarget = event.relatedTarget;\n\n            if (relatedTarget === this.list) {\n                const firstFocusableEl = getFirstFocusableElement(this.$el, ':not([data-p-hidden-focusable=\"true\"])');\n\n                focus(firstFocusableEl);\n                this.$refs.firstHiddenFocusableElement.tabIndex = undefined;\n            } else {\n                focus(this.$refs.firstHiddenFocusableElement);\n            }\n\n            this.$refs.lastHiddenFocusableElement.tabIndex = -1;\n        },\n        onFocusout(event) {\n            if (!this.$el.contains(event.relatedTarget) && this.$refs.lastHiddenFocusableElement && this.$refs.firstHiddenFocusableElement) {\n                this.$refs.lastHiddenFocusableElement.tabIndex = this.$refs.firstHiddenFocusableElement.tabIndex = undefined;\n            }\n        },\n        onListFocus(event) {\n            this.focused = true;\n            this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.findSelectedOptionIndex();\n            this.autoUpdateModel();\n            this.scrollInView(this.focusedOptionIndex);\n            this.$emit('focus', event);\n        },\n        onListBlur(event) {\n            this.focused = false;\n            this.focusedOptionIndex = this.startRangeIndex = -1;\n            this.searchValue = '';\n            this.$emit('blur', event);\n        },\n        onListKeyDown(event) {\n            const metaKey = event.metaKey || event.ctrlKey;\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    this.onSpaceKey(event);\n                    break;\n\n                case 'Tab':\n                    //NOOP\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    this.onShiftKey(event);\n                    break;\n\n                default:\n                    if (this.multiple && event.code === 'KeyA' && metaKey) {\n                        const value = this.visibleOptions.filter((option) => this.isValidOption(option)).map((option) => this.getOptionValue(option));\n\n                        this.updateModel(event, value);\n\n                        event.preventDefault();\n                        break;\n                    }\n\n                    if (!metaKey && isPrintableCharacter(event.key)) {\n                        this.searchOptions(event, event.key);\n                        event.preventDefault();\n                    }\n\n                    break;\n            }\n        },\n        onOptionSelect(event, option, index = -1) {\n            if (this.disabled || this.isOptionDisabled(option)) {\n                return;\n            }\n\n            this.multiple ? this.onOptionSelectMultiple(event, option) : this.onOptionSelectSingle(event, option);\n            this.optionTouched = false;\n            index !== -1 && (this.focusedOptionIndex = index);\n        },\n        onOptionMouseDown(event, index) {\n            this.changeFocusedOptionIndex(event, index);\n        },\n        onOptionMouseMove(event, index) {\n            if (this.focusOnHover && this.focused) {\n                this.changeFocusedOptionIndex(event, index);\n            }\n        },\n        onOptionTouchEnd() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.optionTouched = true;\n        },\n        onOptionDblClick(event, item) {\n            this.$emit('item-dblclick', {\n                originalEvent: event,\n                value: item\n            });\n            this.$emit('option-dblclick', {\n                originalEvent: event,\n                value: item\n            });\n        },\n        onOptionSelectSingle(event, option) {\n            let selected = this.isSelected(option);\n            let valueChanged = false;\n            let value = null;\n            let metaSelection = this.optionTouched ? false : this.metaKeySelection;\n            const _value = this.getOptionValue(option) !== '' ? this.getOptionValue(option) : this.getOptionLabel(option);\n\n            if (metaSelection) {\n                let metaKey = event && (event.metaKey || event.ctrlKey);\n\n                if (selected) {\n                    if (metaKey) {\n                        value = null;\n                        valueChanged = true;\n                    }\n                } else {\n                    value = _value;\n                    valueChanged = true;\n                }\n            } else {\n                value = selected ? null : _value;\n                valueChanged = true;\n            }\n\n            if (valueChanged) {\n                this.updateModel(event, value);\n            }\n        },\n        onOptionSelectMultiple(event, option) {\n            let selected = this.isSelected(option);\n            let value = null;\n            let metaSelection = this.optionTouched ? false : this.metaKeySelection;\n            const _value = this.getOptionValue(option) !== '' ? this.getOptionValue(option) : this.getOptionLabel(option);\n\n            if (metaSelection) {\n                let metaKey = event.metaKey || event.ctrlKey;\n\n                if (selected) {\n                    value = metaKey ? this.removeOption(option) : [_value];\n                } else {\n                    value = metaKey ? this.d_value || [] : [];\n                    value = [...value, _value];\n                }\n            } else {\n                value = selected ? this.removeOption(option) : [...(this.d_value || []), _value];\n            }\n\n            this.updateModel(event, value);\n        },\n        onOptionSelectRange(event, start = -1, end = -1) {\n            start === -1 && (start = this.findNearestSelectedOptionIndex(end, true));\n            end === -1 && (end = this.findNearestSelectedOptionIndex(start));\n\n            if (start !== -1 && end !== -1) {\n                const rangeStart = Math.min(start, end);\n                const rangeEnd = Math.max(start, end);\n                const value = this.visibleOptions\n                    .slice(rangeStart, rangeEnd + 1)\n                    .filter((option) => this.isValidOption(option))\n                    .map((option) => this.getOptionValue(option));\n\n                this.updateModel(event, value);\n            }\n        },\n        onFilterChange(event) {\n            this.$emit('filter', { originalEvent: event, value: event.target.value, filterValue: this.visibleOptions });\n            this.focusedOptionIndex = this.startRangeIndex = -1;\n        },\n        onFilterBlur() {\n            this.focusedOptionIndex = this.startRangeIndex = -1;\n        },\n        onFilterKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                case 'ArrowRight':\n                    this.onArrowLeftKey(event, true);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event, true);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event, true);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    this.onShiftKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            const optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.findFirstFocusedOptionIndex();\n\n            if (this.multiple && event.shiftKey) {\n                this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n            }\n\n            this.changeFocusedOptionIndex(event, optionIndex);\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            const optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.findLastFocusedOptionIndex();\n\n            if (this.multiple && event.shiftKey) {\n                this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n            }\n\n            this.changeFocusedOptionIndex(event, optionIndex);\n            event.preventDefault();\n        },\n        onArrowLeftKey(event, pressedInInputText = false) {\n            pressedInInputText && (this.focusedOptionIndex = -1);\n        },\n        onHomeKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(0, event.target.selectionStart);\n                } else {\n                    target.setSelectionRange(0, 0);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                let metaKey = event.metaKey || event.ctrlKey;\n                let optionIndex = this.findFirstOptionIndex();\n\n                if (this.multiple && event.shiftKey && metaKey) {\n                    this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n            }\n\n            event.preventDefault();\n        },\n        onEndKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(event.target.selectionStart, target.value.length);\n                } else {\n                    const len = target.value.length;\n\n                    target.setSelectionRange(len, len);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                let metaKey = event.metaKey || event.ctrlKey;\n                let optionIndex = this.findLastOptionIndex();\n\n                if (this.multiple && event.shiftKey && metaKey) {\n                    this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n            }\n\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView(0);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView(this.visibleOptions.length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (this.focusedOptionIndex !== -1) {\n                if (this.multiple && event.shiftKey) this.onOptionSelectRange(event, this.focusedOptionIndex);\n                else this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n            }\n        },\n        onSpaceKey(event) {\n            event.preventDefault();\n            this.onEnterKey(event);\n        },\n        onShiftKey() {\n            this.startRangeIndex = this.focusedOptionIndex;\n        },\n        isOptionMatched(option) {\n            return this.isValidOption(option) && typeof this.getOptionLabel(option) === 'string' && this.getOptionLabel(option)?.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale));\n        },\n        isValidOption(option) {\n            return isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n        },\n        isValidSelectedOption(option) {\n            return this.isValidOption(option) && this.isSelected(option);\n        },\n        isEquals(value1, value2) {\n            return equals(value1, value2, this.equalityKey);\n        },\n        isSelected(option) {\n            const optionValue = this.getOptionValue(option) !== '' ? this.getOptionValue(option) : this.getOptionLabel(option);\n\n            if (this.multiple) return (this.d_value || []).some((value) => this.isEquals(value, optionValue));\n            else return this.isEquals(this.d_value, optionValue);\n        },\n        findFirstOptionIndex() {\n            return this.visibleOptions.findIndex((option) => this.isValidOption(option));\n        },\n        findLastOptionIndex() {\n            return findLastIndex(this.visibleOptions, (option) => this.isValidOption(option));\n        },\n        findNextOptionIndex(index) {\n            const matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n        },\n        findPrevOptionIndex(index) {\n            const matchedOptionIndex = index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findSelectedOptionIndex() {\n            if (this.$filled) {\n                if (this.multiple) {\n                    for (let index = this.d_value.length - 1; index >= 0; index--) {\n                        const value = this.d_value[index];\n                        const matchedOptionIndex = this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option) && this.isEquals(value, this.getOptionValue(option)));\n\n                        if (matchedOptionIndex > -1) return matchedOptionIndex;\n                    }\n                } else {\n                    return this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option));\n                }\n            }\n\n            return -1;\n        },\n        findFirstSelectedOptionIndex() {\n            return this.$filled ? this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findLastSelectedOptionIndex() {\n            return this.$filled ? findLastIndex(this.visibleOptions, (option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findNextSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.$filled && index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : -1;\n        },\n        findPrevSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.$filled && index > 0 ? findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : -1;\n        },\n        findNearestSelectedOptionIndex(index, firstCheckUp = false) {\n            let matchedOptionIndex = -1;\n\n            if (this.$filled) {\n                if (firstCheckUp) {\n                    matchedOptionIndex = this.findPrevSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findNextSelectedOptionIndex(index) : matchedOptionIndex;\n                } else {\n                    matchedOptionIndex = this.findNextSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findPrevSelectedOptionIndex(index) : matchedOptionIndex;\n                }\n            }\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findFirstFocusedOptionIndex() {\n            const selectedIndex = this.findFirstSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n        },\n        findLastFocusedOptionIndex() {\n            const selectedIndex = this.findLastSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n        },\n        searchOptions(event, char) {\n            this.searchValue = (this.searchValue || '') + char;\n\n            let optionIndex = -1;\n\n            if (isNotEmpty(this.searchValue)) {\n                if (this.focusedOptionIndex !== -1) {\n                    optionIndex = this.visibleOptions.slice(this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option));\n                    optionIndex = optionIndex === -1 ? this.visibleOptions.slice(0, this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option)) : optionIndex + this.focusedOptionIndex;\n                } else {\n                    optionIndex = this.visibleOptions.findIndex((option) => this.isOptionMatched(option));\n                }\n\n                if (optionIndex === -1 && this.focusedOptionIndex === -1) {\n                    optionIndex = this.findFirstFocusedOptionIndex();\n                }\n\n                if (optionIndex !== -1) {\n                    this.changeFocusedOptionIndex(event, optionIndex);\n                }\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(() => {\n                this.searchValue = '';\n                this.searchTimeout = null;\n            }, 500);\n        },\n        removeOption(option) {\n            return this.d_value.filter((val) => !equals(val, this.getOptionValue(option), this.equalityKey));\n        },\n        changeFocusedOptionIndex(event, index) {\n            if (this.focusedOptionIndex !== index) {\n                this.focusedOptionIndex = index;\n                this.scrollInView();\n\n                if (this.selectOnFocus && !this.multiple) {\n                    this.onOptionSelect(event, this.visibleOptions[index]);\n                }\n            }\n        },\n        scrollInView(index = -1) {\n            this.$nextTick(() => {\n                const id = index !== -1 ? `${this.$id}_${index}` : this.focusedOptionId;\n                const element = findSingle(this.list, `li[id=\"${id}\"]`);\n\n                if (element) {\n                    element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'nearest', behavior: 'smooth' });\n                } else if (!this.virtualScrollerDisabled) {\n                    this.virtualScroller && this.virtualScroller.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex);\n                }\n            });\n        },\n        autoUpdateModel() {\n            if (this.selectOnFocus && this.autoOptionFocus && !this.$filled && !this.multiple && this.focused) {\n                this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n                this.onOptionSelect(null, this.visibleOptions[this.focusedOptionIndex]);\n            }\n        },\n        updateModel(event, value) {\n            this.writeValue(value, event);\n            this.$emit('change', { originalEvent: event, value });\n        },\n        listRef(el, contentRef) {\n            this.list = el;\n            contentRef && contentRef(el); // For VirtualScroller\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        }\n    },\n    computed: {\n        optionsListFlat() {\n            return this.filterValue ? FilterService.filter(this.options, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale) : this.options;\n        },\n        optionsListGroup() {\n            const filteredOptions = [];\n\n            (this.options || []).forEach((optionGroup) => {\n                const optionGroupChildren = this.getOptionGroupChildren(optionGroup) || [];\n                const filteredChildren = this.filterValue ? FilterService.filter(optionGroupChildren, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale) : optionGroupChildren;\n\n                if (filteredChildren?.length) {\n                    filteredOptions.push({ optionGroup, group: true }, ...filteredChildren);\n                }\n            });\n\n            return filteredOptions;\n        },\n        visibleOptions() {\n            return this.optionGroupLabel ? this.optionsListGroup : this.optionsListFlat;\n        },\n        // @deprecated use $filled instead\n        hasSelectedOption() {\n            return isNotEmpty(this.d_value);\n        },\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        },\n        searchFields() {\n            return this.filterFields || [this.optionLabel];\n        },\n        filterResultMessageText() {\n            return isNotEmpty(this.visibleOptions) ? this.filterMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptyFilterMessageText;\n        },\n        filterMessageText() {\n            return this.filterMessage || this.$primevue.config.locale.searchMessage || '';\n        },\n        emptyFilterMessageText() {\n            return this.emptyFilterMessage || this.$primevue.config.locale.emptySearchMessage || this.$primevue.config.locale.emptyFilterMessage || '';\n        },\n        emptyMessageText() {\n            return this.emptyMessage || this.$primevue.config.locale.emptyMessage || '';\n        },\n        selectionMessageText() {\n            return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n        },\n        emptySelectionMessageText() {\n            return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n        },\n        selectedMessageText() {\n            return this.$filled ? this.selectionMessageText.replaceAll('{0}', this.multiple ? this.d_value.length : '1') : this.emptySelectionMessageText;\n        },\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? `${this.$id}_${this.focusedOptionIndex}` : null;\n        },\n        ariaSetSize() {\n            return this.visibleOptions.filter((option) => !this.isOptionGroup(option)).length;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        },\n        containerDataP() {\n            return cn({\n                invalid: this.$invalid,\n                disabled: this.disabled\n            });\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        InputText,\n        VirtualScroller,\n        InputIcon,\n        IconField,\n        SearchIcon,\n        CheckIcon,\n        BlankIcon\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["script", "name", "BaseIcon", "_openBlock", "_createElementBlock", "_mergeProps", "width", "height", "viewBox", "fill", "xmlns", "_ctx", "pti", "_cache", "_createElementVNode", "script", "name", "BaseIcon", "_openBlock", "_createElementBlock", "_mergeProps", "width", "height", "viewBox", "fill", "xmlns", "_ctx", "pti", "_cache", "_createElementVNode", "d", "script", "name", "BaseIcon", "_openBlock", "_createElementBlock", "_mergeProps", "width", "height", "viewBox", "fill", "xmlns", "_ctx", "pti", "_cache", "_createElementVNode", "d", "css", "BaseStyle", "extend", "name", "style", "name", "BaseComponent", "props", "id", "type", "String", "style", "items", "Array", "itemSize", "Number", "scrollHeight", "scrollWidth", "orientation", "numToleratedItems", "delay", "resizeDelay", "lazy", "Boolean", "disabled", "loaderDisabled", "columns", "loading", "showSpacer", "showLoader", "tabindex", "inline", "step", "appendOnly", "autoSize", "VirtualScrollerStyle", "provide", "$pcVirtualScroller", "$parentInstance", "beforeMount", "_this$$primevueConfig", "loadCSS", "nonce", "$primevueConfig", "csp", "script", "BaseVirtualScroller", "inheritAttrs", "emits", "data", "both", "isBoth", "first", "rows", "cols", "last", "page", "numItemsInViewport", "lastScrollPos", "top", "left", "d_numToleratedItems", "d_loading", "loaderArr", "spacerStyle", "contentStyle", "element", "content", "scrollTimeout", "resizeTimeout", "defaultWidth", "defaultHeight", "defaultContentWidth", "defaultContentHeight", "isRangeChanged", "lazyLoadState", "resizeListener", "resizeObserver", "initialized", "watch", "newValue", "oldValue", "handler", "length", "init", "calculateAutoSize", "deep", "mounted", "viewInit", "updated", "unmounted", "unbindResizeListener", "methods", "isVisible", "setContentEl", "getWidth", "getHeight", "bindResizeListener", "setSize", "calculateOptions", "setSpacerSize", "isVertical", "isHorizontal", "scrollTo", "options", "scrollToIndex", "index", "_this", "behavior", "arguments", "undefined", "horizontal", "valid", "every", "i", "_this$element", "_this$element$scrollT", "scrollTop", "_this$element$scrollL", "scrollLeft", "_this$calculateNumIte", "calculateNumItems", "contentPos", "getContentPosition", "calculateFirst", "_index", "_numT", "calculateCoord", "_first", "_size", "_cpos", "newFirst", "isScrollChanged", "scrollInView", "to", "_this2", "_this$getRenderedRang", "getRenderedRange", "viewport", "isToStart", "isToEnd", "pos", "calculateFirstInViewport", "_pos", "Math", "floor", "firstInViewport", "lastInViewport", "_this$element2", "scrollPos", "contentWidth", "offsetWidth", "contentHeight", "offsetHeight", "calculateNumItemsInViewport", "_contentSize", "_itemSize", "ceil", "calculateNumToleratedItems", "_numItems", "_this3", "_this$calculateNumIte2", "calculateLast", "_num", "_isCols", "getLast", "$emit", "from", "map", "Promise", "resolve", "then", "_this3$items", "min", "_this4", "vertical", "minHeight", "minWidth", "position", "contain", "_ref", "width", "height", "_ref2", "_this$items", "isCols", "getComputedStyle", "parseFloat", "paddingLeft", "max", "right", "paddingRight", "paddingTop", "bottom", "paddingBottom", "x", "y", "_this5", "parentElement", "concat", "setProp", "_name", "_value", "_this6", "_objectSpread", "_defineProperty", "setContentPosition", "_this7", "calculateTranslateVal", "setTransform", "_x", "_y", "transform", "translateVal", "onScrollPositionChange", "event", "_this8", "target", "calculateScrollPos", "calculateCurrentIndex", "calculateTriggerIndex", "_currentIndex", "_last", "_isScrollDownOrRight", "_triggerIndex", "firstValue", "maxFirst", "lastValue", "newLast", "newScrollPos", "isScrollDown", "isScrollRight", "currentIndex", "triggerIndex", "isScrollDownOrRight", "onScrollChange", "_this$onScrollPositio", "newState", "isPageChanged", "_this$items2", "_this$items3", "getPageByFirst", "isLazyStateChanged", "onScroll", "_this9", "clearTimeout", "_this$onScrollPositio2", "changed", "setTimeout", "onResize", "_this0", "_ref3", "isDiffWidth", "isDiffHeight", "reinit", "_this1", "bind", "window", "addEventListener", "ResizeObserver", "observe", "removeEventListener", "disconnect", "getOptions", "renderedIndex", "count", "even", "odd", "getLoaderOptions", "extOptions", "el", "findSingle", "elementRef", "contentRef", "computed", "containerClass", "contentClass", "loaderClass", "$slots", "loader", "loadedItems", "_this10", "slice", "item", "loadedRows", "loadedColumns", "components", "SpinnerIcon", "_ctx", "_openBlock", "_createElementBlock", "_mergeProps", "ref", "$options", "apply", "ptmi", "_renderSlot", "styleClass", "getItemOptions", "$data", "_createElementVNode", "ptm", "_Fragment", "_renderList", "key", "_", "numCols", "d_numItemsInViewport", "_createVNode", "_component_SpinnerIcon", "spin", "classes", "root", "_ref", "instance", "props", "striped", "disabled", "fluid", "$invalid", "header", "pcFilter", "listContainer", "list", "optionGroup", "option", "_ref2", "index", "getItemOptions", "isSelected", "highlightOnSelect", "focusedOptionIndex", "getOptionIndex", "isOptionDisabled", "optionCheckIcon", "optionBlankIcon", "emptyMessage", "BaseStyle", "extend", "name", "style", "script$1", "name", "BaseEditableHolder", "props", "options", "Array", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "listStyle", "scrollHeight", "type", "String", "dataKey", "multiple", "Boolean", "metaKeySelection", "filter", "filterPlaceholder", "filterLocale", "filterMatchMode", "filterFields", "virtualScrollerOptions", "Object", "autoOptionFocus", "selectOnFocus", "focusOnHover", "highlightOnSelect", "checkmark", "filterMessage", "selectionMessage", "emptySelectionMessage", "emptyFilterMessage", "emptyMessage", "filterIcon", "undefined", "striped", "tabindex", "Number", "fluid", "ariaLabel", "ariaLabelledby", "style", "ListboxStyle", "provide", "$pcListbox", "$parentInstance", "script", "BaseListbox", "inheritAttrs", "emits", "list", "virtualScroller", "optionTouched", "startRangeIndex", "searchTimeout", "searchValue", "data", "filterValue", "focused", "focusedOptionIndex", "watch", "autoUpdateModel", "mounted", "methods", "getOptionIndex", "index", "fn", "virtualScrollerDisabled", "getOptionLabel", "option", "resolveFieldData", "getOptionValue", "getOptionRenderKey", "getPTOptions", "itemOptions", "key", "ptm", "context", "selected", "isSelected", "disabled", "isOptionDisabled", "isOptionGroup", "optionGroup", "group", "getOptionGroupLabel", "getOptionGroupChildren", "getAriaPosInset", "_this", "visibleOptions", "slice", "length", "onFirstHiddenFocus", "focus", "firstFocusableEl", "getFirstFocusableElement", "$el", "$refs", "lastHiddenFocusableElement", "tabIndex", "isElement", "firstHiddenFocusableElement", "onLastHiddenFocus", "event", "relatedTarget", "onFocusout", "contains", "onListFocus", "findFirstFocusedOptionIndex", "findSelectedOptionIndex", "scrollInView", "$emit", "onListBlur", "onListKeyDown", "_this2", "metaKey", "ctrlKey", "code", "onArrowDownKey", "onArrowUpKey", "onHomeKey", "onEndKey", "onPageDownKey", "onPageUpKey", "onSpaceKey", "onShiftKey", "value", "isValidOption", "map", "updateModel", "preventDefault", "isPrintableCharacter", "searchOptions", "onOptionSelect", "arguments", "onOptionSelectMultiple", "onOptionSelectSingle", "onOptionMouseDown", "changeFocusedOptionIndex", "onOptionMouseMove", "onOptionTouchEnd", "onOptionDblClick", "item", "originalEvent", "valueChanged", "metaSelection", "_value", "removeOption", "d_value", "concat", "_toConsumableArray", "onOptionSelectRange", "_this3", "start", "end", "findNearestSelectedOptionIndex", "rangeStart", "Math", "min", "rangeEnd", "max", "onFilterChange", "target", "onFilterBlur", "onFilterKeyDown", "onArrowLeftKey", "onEnterKey", "optionIndex", "findNextOptionIndex", "shiftKey", "findPrevOptionIndex", "findLastFocusedOptionIndex", "pressedInInputText", "currentTarget", "setSelectionRange", "selectionStart", "findFirstOptionIndex", "len", "findLastOptionIndex", "isOptionMatched", "_this$getOptionLabel", "toLocaleLowerCase", "startsWith", "isNotEmpty", "isValidSelectedOption", "isEquals", "value1", "value2", "equals", "equalityKey", "_this4", "some", "_this5", "findIndex", "_this6", "findLastIndex", "_this7", "matchedOptionIndex", "_this8", "_this9", "$filled", "_loop", "v", "_ret", "findFirstSelectedOptionIndex", "_this0", "findLastSelectedOptionIndex", "_this1", "findNextSelectedOptionIndex", "_this10", "findPrevSelectedOptionIndex", "_this11", "firstCheckUp", "selectedIndex", "char", "_this12", "clearTimeout", "setTimeout", "_this13", "val", "_this14", "$nextTick", "id", "$id", "focusedOptionId", "element", "findSingle", "scrollIntoView", "block", "inline", "behavior", "scrollToIndex", "writeValue", "listRef", "el", "contentRef", "virtualScrollerRef", "computed", "optionsListFlat", "FilterService", "searchFields", "optionsListGroup", "_this15", "filteredOptions", "forEach", "filteredChildren", "push", "apply", "hasSelectedOption", "filterResultMessageText", "filterMessageText", "replaceAll", "emptyFilterMessageText", "$primevue", "config", "locale", "searchMessage", "emptySearchMessage", "emptyMessageText", "selectionMessageText", "emptySelectionMessageText", "selectedMessageText", "ariaSetSize", "_this16", "containerDataP", "cn", "invalid", "$invalid", "directives", "ripple", "Ripple", "components", "InputText", "VirtualScroller", "InputIcon", "IconField", "SearchIcon", "CheckIcon", "BlankIcon", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "$options", "ptmi", "_createElementVNode", "ref", "role", "onFocus", "$slots", "header", "_renderSlot", "_createVNode", "_component_IconField", "unstyled", "pt", "_component_InputText", "$data", "$event", "placeholder", "autocomplete", "onInput", "onBlur", "onKeydown", "_component_InputIcon", "_createBlock", "_component_SearchIcon", "_component_VirtualScroller", "items", "height", "content", "_withCtx", "_ref", "styleClass", "getItemOptions", "contentStyle", "itemSize", "_Fragment", "_renderList", "i", "_withDirectives", "onClick", "onMousedown", "onMousemove", "onTouchend", "onDblclick", "ref_for", "_component_CheckIcon", "_component_BlankIcon", "_createTextVNode", "_toDisplayString", "loader", "_ref2"]
}
